<?xml version="1.0" encoding="utf-8"?>
<mx:VBox horizontalAlign="center"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	creationComplete="init()" width="1194" height="688">

		
		<mx:HTTPService id="mainSvc" 
		useProxy="false"
		method="GET"
		url="http://localhost:8080/bakery/svc.htm?svc=org.bakery.server.controllers.svc.impl.MoneyMoveSvc"
				result="httpResultHandler(event)"
		fault="httpFaultHandler(event)"/>
		
		<mx:Model id="formModel">		
		<root>
			<mode>{tiId.text as int>0 ? tiMode.text : &quot;NEW&quot;}</mode>
			<id>{tiId.text}</id>
			<destinationAccount>{cbDestinationAccount.selectedItem.id}</destinationAccount>
			<sourceAccount>{cbSourceAccount.selectedItem.id}</sourceAccount>
			<amount>{tiAmount.text}</amount>		
			<active>{cbActive.selected == true ? "1" : "0"}</active>	
			<date>{dfDate.text}</date>
			<order>{cbOrder.selectedItem.id}</order>
			<price>{cbPriceItem.selectedItem.id}</price>
			<desc>{tiDesc.text}</desc>
		</root>		
	</mx:Model>	
		
	<mx:Script>
		<![CDATA[
			import mx.events.CollectionEvent;
			import mx.automation.codec.ArrayPropertyCodec;
			import mx.validators.RegExpValidator;
			import mx.utils.StringUtil;
			import mx.rpc.http.mxml.HTTPService;
			import flash.sampler.getInvocationCount;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import LogComp.Util;
			public var mainDataSvcUrl:String;
			public var mainDataUnitName:String;
			public var mainDataUnitVisualName:String;
			public var hideEffect:*;
			[Bindable] private var mainData:*;
			[Bindable] private var accounts:*;   
            [Bindable] private var availableAccounts:ArrayCollection;
            [Bindable] private var orders:*;   
            [Bindable] private var availableOrders:ArrayCollection;
            [Bindable] private var priceItems:*;   
            [Bindable] private var availablePriceItems:ArrayCollection;
            [Bindable] private var test:ArrayCollection = new ArrayCollection();
            [Bindable] private var errors:ArrayCollection = new ArrayCollection();
            	var util:Util = new Util();	
			public function init():void{
				createNew();				
				mainSvc.cancel();
			
				formModel.mode="FETCH";
				mainSvc.send(formModel);
					
			}
			
			private function httpFaultHandler(event:Event):void{
					 mx.controls.Alert.show(event.toString())	;
				
			} 
			 
			private function httpResultHandler(event:*):void{	
				errors = util.getHttpRespondedErrors(event);
				
				accounts = util.extractItemCollection(event.result.accounts, 'account');	
				availableAccounts = util.getActiveItems(accounts);
				
				orders = util.extractItemCollection(event.result.orders, 'order');
				availableOrders = util.getActiveItems(orders);	
			
				priceItems = util.extractItemCollection(event.result.priceListItems, 'pricelistitem');
				availablePriceItems = util.getActiveItems(priceItems);	
				
				for (var i:int = 0; i<availablePriceItems.length; i++){    
					 var o:Object = {write:  availablePriceItems[i].product+' for '+availablePriceItems[i].price};                
           			 test.addItemAt(o, i); }
			
				mainData = event.result.mainData;
				
				if (mainData != null ) {
					mainData['moneymove'].filterFunction = mainFilterFunction;
				}
			} 
		
			private function mainFilterFunction(item:*){
				var result:Boolean=true;
				if (!cbShowNonActive.selected && item.active<=0)
					return false;
				if (!cbShowActive.selected && item.active>0)
					return false;					
///				if (mx.utils.StringUtil.trim(edFilter.text).length>0) {
	//				if (!new RegExp(edFilter.text).test(item.provider))
	//					return false;
	//			}
				return result;
			} 
			function bindSelected():void{
				var item = dgData.selectedItem;
				if (dgData.selectedIndex>=0){
				cbActive.selected = (dgData.selectedItem.active == 0);
				tiId.text=dgData.selectedItem.id;
				dfDate.text = dgData.selectedItem.date;
				tiDesc.text = dgData.selectedItem.desc;
				cbDestinationAccount.selectedIndex = util.getItemPos(availableAccounts, item.destinationAccount);
				cbSourceAccount.selectedIndex = util.getItemPos(availableAccounts, item.sourceAccount);
				tiAmount.text = dgData.selectedItem.amount;
				cbOrder.selectedIndex = util.getItemPos(availableOrders, item.order);
				cbPriceItem.selectedIndex = util.getItemPos(availablePriceItems, item.price);
				
				}													
			}
			function createNew():void{
				tiId.text="";
				tiAmount.text = "";
				tiDesc.text = "";
				dfDate.text = "";
				cbActive.selected=true;
				formModel.mode="NEW";
						
			}
			function cancel():void{
				bindSelected();
			}
			function saveSelected():void{
				
				formModel.mode="EDIT";
				mainSvc.cancel();	
				mainSvc.send(formModel);
			
				
			}
			function filterRefresh():void{
				mainData['maneymove'].refresh();
			}
			function activeToString(item:Object, column:DataGridColumn):String{				
				return (item.active>0 ? "-" : "+"); 
				
				
			}
			function getDestAccountName(item:Object, column:DataGridColumn):String{	
				var tmp = util.getItemById(accounts, item.destinationAccount);
				if (tmp == null) {
					return "";
				} else {
					return tmp.name;
				}					
			}
			
				function getProdName(item:Object,id_:*):String{	
				var tmp = util.getItemById(priceItems, id_);
				if (tmp == null) {
					return "";
				} else {
					return tmp.name;
				}					
			}
				function getSourceAccountName(item:Object, column:DataGridColumn):String{	
				var tmp = util.getItemById(accounts, item.sourceAccount);
				if (tmp == null) {
					return "";
				} else {
					return tmp.name;
				}					
			}
			
			
		]]>
	</mx:Script>			
	
		<mx:Label text="Движение денег" fontWeight="normal" fontSize="24"/>
		<mx:VBox  width="1194" height="646">
		<mx:HBox x="0" y="0" width="1179" height="536">
			<mx:VBox height="532" width="925" horizontalAlign="center" >
			
				<mx:DataGrid height="390" width="902" 
					id="dgData" 
					dataProvider="{mainData['moneymove']}"
					itemClick="bindSelected()">
					<mx:columns>
						<mx:DataGridColumn headerText="Ид.Номер"  dataField="id"  width="55"/>
						<mx:DataGridColumn headerText="Счет назначения"  dataField="destinationAccount"  labelFunction="getDestAccountName" width="100"/>
						<mx:DataGridColumn headerText="Счет-источник"  dataField="sourceAccount" labelFunction="getSourceAccountName" width="100"/>
						<mx:DataGridColumn headerText="Размер" dataField="amount"   width="50"/>
						<mx:DataGridColumn headerText="Дата перевода " dataField="date" width="80"/>
						<mx:DataGridColumn headerText="Заказ" dataField="order" width="60"/>
						<mx:DataGridColumn headerText="Прайс" dataField="price" width="60"/>
						<mx:DataGridColumn headerText="Описание" dataField="desc" width="70"/>
						<mx:DataGridColumn dataField="Оплачен" labelFunction="activeToString" width="55"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:HBox width="887" height="99">
				<mx:VBox width="364">
					<mx:FormItem label="Счет назначения:" 
						required="true" fontWeight="bold" width="350">												
						<mx:ComboBox id="cbDestinationAccount"
							dataProvider="{availableAccounts}"
							labelField="name" 
							width="224" fontWeight="normal"/>
					</mx:FormItem>
					<mx:FormItem label="Счет-источник:" 
						required="true" fontWeight="bold">												
						<mx:ComboBox id="cbSourceAccount"
							dataProvider="{availableAccounts}"
							labelField="name" 
							width="242" fontWeight="normal"/>
					</mx:FormItem>
					<mx:FormItem label="Размер:" required="true"  fontWeight="bold">
						<mx:TextInput id="tiAmount" fontWeight="normal" width="274">
						</mx:TextInput>
					</mx:FormItem>
				</mx:VBox>
				<mx:VBox height="100%" width="302">
						<mx:FormItem label="Дата перевода:" 
						required="true" fontWeight="bold">	
					<mx:DateField id="dfDate"
							text=""
							formatString="DD/MM/YY" fontWeight="normal" width="169"/>
						</mx:FormItem>
						<mx:FormItem label="Заказ:" 
						required="true" fontWeight="bold" width="283">												
						<mx:ComboBox id="cbOrder"
							dataProvider="{availableOrders}"
							labelField="id" 
							width="214" fontWeight="normal"/>
					</mx:FormItem>
					<mx:FormItem label="Описание:"  fontWeight="bold" width="283">
						<mx:TextInput id="tiDesc" fontWeight="normal">
						</mx:TextInput>
					</mx:FormItem>
				</mx:VBox>
				<mx:VBox height="95" width="186">
					<mx:FormItem label="Прайс" width="182" fontWeight="bold">
					<mx:ComboBox id="cbPriceItem"
							dataProvider="{test}"
							labelField="write" 
							width="118" fontWeight="normal"/>
					</mx:FormItem>
				
				<mx:FormItem label="Оплачен" width="111" fontWeight="bold">
					<mx:CheckBox id="cbActive"  />
					</mx:FormItem>
				</mx:VBox>
				</mx:HBox>
				<mx:HBox width="100%" height="27">
					<mx:Button label="Сохранить" click="saveSelected()" width="173"/>
					<mx:Button label="Отмена" click="cancel()" width="173"/>
					<mx:Button label="Создать" click="createNew()" width="173"/>
				</mx:HBox>
			</mx:VBox>			
			<mx:VBox height="194" horizontalAlign="center" verticalAlign="center" width="242">				
				<mx:VBox horizontalAlign="left" height="17" width="232">	
					<mx:TextInput id="tiMode" visible="false" text="EDIT"/>
					<mx:TextInput id="tiId" visible="false" text=""/>
					
					
				</mx:VBox>
				
				<mx:VBox id="filterPanel">
					<mx:Script>
						<![CDATA[
							[Bindable]
							public var filterPanelMinimized:Boolean=true;							
						]]>
					</mx:Script>
					<mx:HBox horizontalAlign="right" width="100%">
						<mx:FormItem label="Фильтр:" width="232">
							<mx:Button id="filterButton" label="{filterPanelMinimized ? &quot;-&quot; : &quot;+&quot;}" click="filterPanelMinimized = !filterPanelMinimized" width="96"/>
						</mx:FormItem>												
					</mx:HBox>					
					<mx:VBox id="filterDetails" visible="{filterPanelMinimized ? false : true}">												
						<mx:FormItem label="Показывать:" horizontalAlign="left" width="100%">
							<mx:CheckBox id="cbShowActive" click="filterRefresh()" selected="true" label="Активные"/>
							<mx:CheckBox id="cbShowNonActive" click="filterRefresh()" selected="true" label="Неактивные"/>
						</mx:FormItem>
					</mx:VBox>					
				</mx:VBox>
			</mx:VBox>
		</mx:HBox>
		
		
		<mx:DataGrid dataProvider="{errors}"
			visible="{errors.length>0}"
			width="1179" height="96">
			<mx:columns>
				<mx:DataGridColumn headerText="Ошибки"
					 dataField="message"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
	</mx:VBox>
