<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="996" height="554" fontSize="24" creationComplete="init()">
<mx:HTTPService id="moneyMoveSvc" 
		useProxy="false"
		method="POST"
		url="http://localhost:8080/bakery/svc.htm?svc=org.bakery.server.controllers.svc.impl.MoneyMoveSvc"
		result="httpResultHandler(event)"
		fault="httpFaultHandler(event)"/>
<mx:HTTPService id="contragentSvc" 
		useProxy="false"
		method="POST"
		url="http://localhost:8080/bakery/svc.htm?svc=org.bakery.server.controllers.svc.impl.ContragentSvc"
		result="httpContragentResultHandler(event)"
		fault="httpFaultHandler(event)"/>	
<mx:HTTPService id="orderSvc" 
		useProxy="false"
		method="POST"
		url="http://localhost:8080/bakery/svc.htm?svc=org.bakery.server.controllers.svc.impl.OrderSvc"
		result="httpOrderResultHandler(event)"
		fault="httpFaultHandler(event)"/>	
<mx:HTTPService id="planSvc" 
		useProxy="false"
		method="POST"
		url="http://localhost:8080/bakery/svc.htm?svc=org.bakery.server.controllers.svc.impl.ProductionPlanSvc"
		result="httpPlanResultHandler(event)"
		fault="httpFaultHandler(event)"/>		

<mx:Script>	



<![CDATA[
	import LogComp.Util;
	import mx.collections.ArrayCollection;
	
	 private var mainData:*;
	  private var destinationAccount:*;
	  private var sourceAccount:*;
	  private var amount:*;
	  private var price:*;
	  private var desc:*;
	[Bindable] private var orders:ArrayCollection; 
	[Bindable] private var contragent:ArrayCollection; 
	[Bindable] private var accounts:ArrayCollection;
	[Bindable] private var errors:ArrayCollection = new ArrayCollection();
	 var util:Util = new Util();
	 
	 function httpOrderResultHandler(event:*){
	 orders = getNoActiveItems(util.extractItemCollection(event.result.mainData, 'order'));
	 mx.controls.Alert.show("Средства перечислены.");
	 }
	 
	 function httpPlanResultHandler(event:*){
	 
	 
	 }
	public function getItemById(items:*, _id:*):*{
		var result=null;
		if (items == null)
			return null;
		for each (var unit in items){ 
			if(unit != null){
				if (unit.hasOwnProperty('id')){
			
			if (unit.id == _id) {
				result = unit;
			}
			}else{
			result = items;
			}
			}else{
			result = items;
			}
		} 
		return result;
	}
	function getItemIdByOrder(items:*, __id:*):*{
		var result=null;
		if (items == null)
			return null;
		for each (var unit in items){ 
			if(unit != null){
			
			if (unit.hasOwnProperty('order')){
			if (unit.order == __id) {
				result = unit;
			
			}
			}else{
			result = items;
			}
			}else{
			result = items;
			}
		} 
		return result;
	}
	public function getNoActiveItems(items:ArrayCollection):ArrayCollection{
		var result = new ArrayCollection();		
		for each (var item in items){
			if (item.hasOwnProperty('active')){
				if (item.active  == false){
					result.addItem(item);
				}
			}			
		} 		
		return result;		
	}
	 function httpContragentResultHandler(event:*){
	 	errors = util.getHttpRespondedErrors(event);
	 	contragent = event.result.mainData['contragent'];
	 	
	 }
	function init(){
		formModel.mode = "FETCH";
		formModelContragent.mode = "FETCH";
		
		moneyMoveSvc.cancel();
		moneyMoveSvc.send(formModel);
		contragentSvc.cancel();
		contragentSvc.send(formModelContragent);
	}
	function httpResultHandler(event:*){
		errors = util.getHttpRespondedErrors(event);
		if(event.result.mainData!=null){
		mainData = event.result.mainData['moneymove'];
		}
		accounts = util.extractItemCollection(event.result.accounts, 'account');
		orders = getNoActiveItems(util.extractItemCollection(event.result.orders, 'order'));
		
		orderName.selectedIndex =0;
		writeAll();
		
		
	
	}
	function httpFaultHandler(event:Event):void{
					 mx.controls.Alert.show(event.toString())	;
			
			} 
	function clearAll(){
		clearAllText();
		orderName.selectedIndex = 0;
		date.text = "";
	}
	function writeAll(){
		clearAllText();
		if(orderName.selectedItem){
		var contragentItem = getItemById(contragent,orderName.selectedItem.consumer);
		var item = getItemIdByOrder(mainData,orderName.selectedItem.id)
		if(item == null){
			mx.controls.Alert.show("Отсутствует движение денег по данному заказу. Вы можете создать его используя панель для работы  с движением денег.");
		}else{
		
		lbSourceAccount.text = item.sourceAccount ;
		lbDestinationAccount.text = item.destinationAccount;
		lbAmount.text = item.amount;
		lbPrice.text = item.price;
		lbId.text = item.id;
		lbDesc.text = item.desc;
		}
		if(contragentItem != null){
		lbContragent.text = contragentItem.textView;
		}
		}
		
	}
	function sendOrder(){
		orderSvc.cancel();
		formModelOrder.id = orderName.selectedItem.id;
		formModelOrder.mode = "EDIT";
		formModelOrder.active = true;
		formModelOrder.provider = orderName.selectedItem.provider;
		formModelOrder.consumer = orderName.selectedItem.consumer;
		formModelOrder.creationDate = orderName.selectedItem.creationDate;
		formModelOrder.doneDate = orderName.selectedItem.doneDate;
		orderSvc.send(formModelOrder);
		
	}
	function saveSelected():void{
	if(checData() == true){
				
				formModel.mode="EDIT";
				moneyMoveSvc.cancel();			
				moneyMoveSvc.send(formModel);
				sendOrder();
				writeAll();
	}
			}
	function clearAllText(){
		lbSourceAccount.text = "" ;
		lbDestinationAccount.text = "";
		lbAmount.text = "";
		lbPrice.text = ""
		lbId.text = "";
		lbDesc.text = "";
		lbContragent.text = "";
	}
	
	function checData(){
		var result:Boolean;
		
		if(orderName.selectedItem != null){
			result = true;
		}else{
			mx.controls.Alert.show("Вы не выбрали заказ для оплаты!");
			return false;
		}
		if(lbSourceAccount.text == ''||lbDestinationAccount.text == "" ){
			mx.controls.Alert.show("У выбраного заказа отсутствуют необходимые для оплаты счета!");
			return false;
		}else{
			result = true;
		}
		if(lbId.text == "" ||lbAmount.text == "" ||lbPrice.text =="" || date.text ==""){
			mx.controls.Alert.show("Отсутствует часть данных, проверьте правильность заполеных полей!");
			return false;
		}else{
			result = true;
		}
		return result;
	}
		]]>
</mx:Script>
<mx:Model id="formModelContragent">		
		<root>
			<mode></mode>
			<address>{}</address>		
			<active>{}</active>
			<child>{}</child>
			<name>{}</name>
		</root>		
	</mx:Model>	
	<mx:Model id="formModelPlan">		
		<root>
			<mode></mode>
			<id>{}</id>	
			<active>{}</active>	
			<startDate>{}</startDate>
			<order>{}</order>
			<recipe>{}</recipe>
		</root>		
	</mx:Model>	
	<mx:Model id="formModel">		
		<root>
			<mode></mode>
			<id>{lbId.text}</id>
			<destinationAccount>{lbDestinationAccount.text}</destinationAccount>
			<sourceAccount>{lbSourceAccount.text}</sourceAccount>
			<amount>{lbAmount.text}</amount>		
			<active>{"1"}</active>	
			<date>{date.text}</date>
			<order>{orderName.selectedItem.id}</order>
			<price>{lbPrice.text}</price>
			<desc>{lbDesc.text}</desc>
			
		</root>		
	</mx:Model>	
<mx:Model id="formModelOrder">		
		<root>
			<mode></mode>
			<provider>{}</provider>
			<consumer>{}</consumer>
			<id>{}</id>		
			<active>{"1"}</active>	
			<creationDate>{}</creationDate>
			<doneDate>{}</doneDate>
			
		</root>		
	</mx:Model>		
	<mx:Label text="ОПЛАТА СЧЕТА" x="58.5" y="10" fontSize="14" fontWeight="bold"/>
	<mx:VBox x="10" y="53" height="341" width="976">
	
	<mx:FormItem label="Заказ" width="95%" fontWeight="bold" fontSize="11">
		<mx:ComboBox id="orderName"
			dataProvider="{orders}"
			labelField = "textView"
			 width="450"
			 change = "writeAll()"
			
			 fontWeight="normal"/>
	</mx:FormItem>
	<mx:VBox width="100%" height="161">
	<mx:HBox width="100%">
		<mx:Label text="В соответствии с выбранным заказом будет осуществлен перевод средств контрагентом:" fontSize="11" fontWeight="bold"/>
		<mx:Label text="" id="lbContragent" fontSize="12" width="100%"/>
	</mx:HBox>
	<mx:HBox width="835">
		<mx:Label text="Со счета №: " fontSize="11" width="111" fontWeight="bold"/>
		<mx:Label text=" " id="lbSourceAccount"  fontSize="12" width="100%"/>
		<mx:Label text="на счет №: " fontSize="11" width="89" fontWeight="bold"/>
		<mx:Label text=" " id="lbDestinationAccount"  fontSize="12" width="100%"/>
	</mx:HBox> 
	<mx:HBox width="100%">
		<mx:Label text="Ид.Номер перевода:" fontSize="11" width="165" fontWeight="bold"/>
		<mx:Label text=" " id="lbId"  fontSize="12" width="100%"/>
	</mx:HBox>
	<mx:HBox width="100%">
		<mx:Label text="Размер:" fontSize="11" width="68" fontWeight="bold"/>
		<mx:Label text=" " id="lbAmount"  fontSize="12" width="100%"/>
	</mx:HBox>
	
	 
	<mx:HBox width="100%">
		<mx:Label text="Цена:" fontSize="11" width="48" fontWeight="bold"/>
		<mx:Label text=" " id="lbPrice"  fontSize="12" width="133"/>
	</mx:HBox>
	<mx:HBox width="100%">
		<mx:Label text="Описание:" fontSize="11" width="73" fontWeight="bold"/>
		<mx:Label text=" " id="lbDesc"  fontSize="12" width="100%"/>
	</mx:HBox>
	
	
	</mx:VBox>
	<mx:FormItem label="Дата перевода" width="90%" fontWeight="bold" fontSize="11">
		<mx:DateField id="date" fontWeight="normal" formatString="DD/MM/YY" width="167"/>
		
	</mx:FormItem>
	<mx:HBox width="100%">
		<mx:Button label="Перечислить"  fontSize="12" click="saveSelected()"/>
		<mx:Button label="Очистить"  click="clearAll()" fontSize="12"/>

	</mx:HBox>
	<mx:DataGrid dataProvider="{errors}"
			visible="{errors.length>0}"
			width="910" height="84" fontSize="12" >
			<mx:columns>
				<mx:DataGridColumn headerText="Ошибки"
					 dataField="message"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
</mx:Canvas>
