<?xml version="1.0" encoding="utf-8"?>
<mx:VBox horizontalAlign="center"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:comp="components.*"
	creationComplete="init()" width="974" height="595">
	<!-- represents selected main item: Recipe -->
	<mx:Model id="formModel">		
		<root>
			<mode>EDIT</mode>			
			<id></id>
			<active>{cbActive.selected == true ? "1" : "0"}</active>
			<name>{encodeURI(tiName.text)}</name>
			<time>{tiTime.text}</time>
			<formula>{encodeURI(tiFormula.text)}</formula>
		</root>		
	</mx:Model>		
	
	<!-- represents selected subItem: RecipeEffect -->
	<mx:Model id="childModel">
		<root>
			<mode>EDIT</mode>
			
			<id></id>
			<consumed>{cbChildConsumed.selected == true ? "1" : "0"}</consumed>
			<recipe>{dgData.selectedItem.id}</recipe>
			
			<resultFormula>{encodeURI(tiChildResultFormula.text)}</resultFormula>
			<productType>{cbChildProductType.selectedItem.id}</productType>
		</root>					
	</mx:Model>
	<mx:HTTPService id="mainSvc" 
		useProxy="false"
		method="GET"
		url="{mainDataSvcUrl}"
		result="httpResultHandler(event)"
		fault="util.httpFaultHandler(event)"/>
	<mx:HTTPService id="childSvc" 
		useProxy="false"
		method="GET"
		url="{childDataSvcUrl}"
		result="httpChildResultHandler(event)"
		fault="util.httpFaultHandler(event)"/>
	<mx:VBox horizontalAlign="center" width="956">	
	<mx:Script>
		<![CDATA[
			import flash.sampler.NewObjectSample;
			import mx.events.CollectionEvent;
			import mx.automation.codec.ArrayPropertyCodec;
			import mx.validators.RegExpValidator;
			import mx.utils.StringUtil;
			import mx.rpc.http.mxml.HTTPService;
			import flash.sampler.getInvocationCount;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import components.Util;
			public var mainDataSvcUrl:String;
			public var childDataSvcUrl:String;
			public var hideEffect:*;
			[Bindable]
            private var mainData:ArrayCollection = new ArrayCollection();                  

			[Bindable] private var devices:ArrayCollection;
			[Bindable] private var availableParameters:ArrayCollection;
			[Bindable] private var parameters:ArrayCollection;
			[Bindable] private var selectedParameters:ArrayCollection = new ArrayCollection();
            
   			[Bindable] private var productTypes:ArrayCollection;            
            [Bindable] private var availableProductTypes:ArrayCollection;

            
			[Bindable] private var recipeEffects:ArrayCollection;
			[Bindable] private var selectedRecipeEffects:ArrayCollection = new ArrayCollection();     
											
			[Bindable]
	        private var errors:ArrayCollection = new ArrayCollection();          
			
			var util:Util = new Util();
			
			function childBindSelected(){
				var item = dgChildData.selectedItem;
				if (item != null){
					childModel.id = item.id;
					cbChildProductType.selectedIndex = util.getItemPos(availableProductTypes, item.product);
					tiChildResultFormula.text = item.resultFormula;
					cbChildConsumed.selected = (item.consumed ==1);
				}
			}				
			function childSave(){
				childSvc.cancel();
				childSvc.send(childModel);
			}

		
			function getProductTypeName(item:Object, column:DataGridColumn):String{				
				var tmp = util.getItemById(productTypes, item.product);
				if (tmp == null) {
					return "";
				} else {
					return tmp.name;
				}					
			}
			
			public function init():void{
				createNew();				
				mainSvc.cancel();
				formModel.mode="FETCH";
				mainSvc.send(formModel);				
			}

			private function httpResultHandler(event:*):void{
				errors = util.getHttpRespondedErrors(event);
				
				productTypes = util.extractItemCollection(event.result.productTypes, 'producttype');
				recipeEffects = util.extractItemCollection(event.result.recipeEffects, 'recipeeffect');
				parameters = util.extractItemCollection(event.result.deviceParameters, 'deviceparameter');
				devices = util.extractItemCollection(event.result.devices, 'device');
				            	            
				availableProductTypes = util.getActiveItems(productTypes);
				availableParameters = util.getActiveItems(parameters);				
								            
				mainData = util.extractItemCollection(event.result.mainData, 'recipe');
				
				for each (var param in availableParameters){
					param.devicename = util.getItemById(devices, param.device).name;	
				}
			} 
			private function httpChildResultHandler(event:*):void{
				errors = util.getHttpRespondedErrors(event);
				recipeEffects = util.extractItemCollection(event.result.mainData, 'recipeffect');				
				bindSelected(true);
			} 
			private var previousSelected:int=-104;
			
			function bindSelected(refreshAnyWay:Boolean):void{				
				if ((refreshAnyWay) || (dgData.selectedIndex >= 0) && (previousSelected != dgData.selectedIndex)) {
					previousSelected = dgData.selectedIndex;

					cbActive.selected = (dgData.selectedItem.active == 1);
																			
					tiName.text=dgData.selectedItem.name;
					tiTime.text=dgData.selectedItem.time;
					tiFormula.text=dgData.selectedItem.formula;
					
					selectedParameters.removeAll();				
					if ((dgData.selectedItem.parameters != null) && (dgData.selectedItem.parameters.parameter!=null)){
						if (dgData.selectedItem.parameters.parameter instanceof ArrayCollection){
							for each (var p in dgData.selectedItem.parameters.parameter) {
								var item = new Object();
								var param = util.getItemById(parameters, p.id);
								var device = util.getItemById(devices, param.device);
								item.parameter = param;
								item.device = device;
								item.paramname = param.name;
								item.devicename = device.name;
								selectedParameters.addItem(item);
							}
						} else {
							var item = new Object();
							var p = dgData.selectedItem.parameters.parameter;
							var param = util.getItemById(parameters, p.id);
							var device = util.getItemById(devices, param.device);
							item.parameter = param;
							item.device = device;
							item.paramname = param.name;
							item.devicename = device.name;
							selectedParameters.addItem(item);
						}
						
					}
					selectedParameters.refresh();	
					
					selectedRecipeEffects.removeAll();
					formModel.id = dgData.selectedItem.id;
					childModel.recipe = formModel.id;				
					for each (var recipeEffect in recipeEffects){
						if (recipeEffect.recipe == dgData.selectedItem.id){
							selectedRecipeEffects.addItem(recipeEffect);
						}
					}
					selectedRecipeEffects.refresh();
				}													
			}
			function createNew():void{
				formModel.id="";
				cbActive.selected=true;				
				formModel.mode="NEW";			
				tiFormula.text="";
				tiName.text="";
			}
			function childCreateNew():void{
				childModel.id="";			
				cbChildProductType.selectedIndex = -1;				
				tiChildResultFormula.text = "";
			}
			function cancel():void{
				bindSelected(false);
			}
			function saveSelected():void{
				formModel.mode="EDIT";
				mainSvc.cancel();	
				mainSvc.send(formModel);
			}
			function addDeviceParameter():void{
				formModel.mode="SPECIAL_ADD";
				formModel.id = dgAvailableParameters.selectedItem.id;
				mainSvc.cancel();
				mainSvc.send(formModel);			
			}
			function removeDeviceParameter():void{
				formModel.id = dgCurrentParameters.selectedItem.parameter.id;
				formModel.mode="SPECIAL_REMOVE";
				mainSvc.cancel();
				mainSvc.send(formModel);							
			}
		]]>
	</mx:Script>				
		<mx:Label text="Панель управления рецептами" fontFamily="Verdana" fontWeight="bold" fontSize="14"/>
		<mx:HBox width="956" height="245">
			<mx:VBox height="236" width="462" horizontalAlign="left" >
					<mx:DataGrid height="99" width="456" 
						id="dgData" 
						dataProvider="{mainData}"
						itemClick="bindSelected(false)">
						<mx:columns>
							<mx:DataGridColumn headerText="Ид.Номер" dataField="id" width="65"/>
							<mx:DataGridColumn headerText="Название" dataField="name" width="150"/>
							<mx:DataGridColumn headerText="Вр.созд." dataField="time" width="60"/>
							<mx:DataGridColumn headerText="Формула" dataField="formula" width="100"/>
							<mx:DataGridColumn headerText="Активн." labelFunction="util.activeToString" width="55"/>
						</mx:columns>
					</mx:DataGrid>
					<mx:HBox width="411">
					<mx:VBox horizontalAlign="left" height="123" width="398">
					<mx:HBox width="386">
						<mx:FormItem label="Активно:"
							required="true" width="110">
							<mx:CheckBox id="cbActive"/>
						</mx:FormItem>
						<mx:FormItem label="Время:" 
							required="true" width="262">
							<mx:TextInput id="tiTime"/>
						</mx:FormItem>
						</mx:HBox>
						<mx:FormItem label="Название:" width="241">												
							<mx:TextInput id="tiName" width="142" height="25"/>
						</mx:FormItem>
						<mx:FormItem label="Формула:" width="311">												
							<mx:TextInput id="tiFormula" width="222" height="25"/>
						</mx:FormItem>
						<mx:HBox width="260">
						<mx:Button label="Сохранить" click="saveSelected()"/>							
						<mx:Button label="Отмена" click="cancel()"/>
						<mx:Button label="Создать" click="createNew()"/>
						</mx:HBox>
						</mx:VBox>				
					
				</mx:HBox>
			</mx:VBox>			
			<mx:HBox width="477" height="240">
				<mx:VBox width="204" height="234" horizontalAlign="center">
					<mx:Label text="Параметры, касающиеся рецепта"/>
					<mx:DataGrid width="182" height="206"
						dataProvider="{selectedParameters}"
						id="dgCurrentParameters">
						<mx:columns>
							<mx:DataGridColumn headerText="Устройство" dataField="devicename"/>
							<mx:DataGridColumn headerText="Параметр" dataField="paramname"/>
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
				<mx:VBox width="47" height="223" verticalAlign="center">													
					<mx:Button label="&lt;" click="addDeviceParameter()"/>
					<mx:Button label="&gt;" click="removeDeviceParameter()"/>
				</mx:VBox>
				<mx:VBox width="203" height="236" horizontalAlign="center">
					<mx:Label text="Все актуальные параметры"/>
					<mx:DataGrid width="185" height="206" 
						dataProvider="{availableParameters}"
						id="dgAvailableParameters">
						<mx:columns>
							<mx:DataGridColumn headerText="Устройство" dataField="devicename"/>
							<mx:DataGridColumn headerText="Параметр" dataField="name"/>
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:HBox>
		</mx:HBox>
	</mx:VBox>
	<mx:VBox>
		
		
		<mx:HBox width="948" height="212">		
					<mx:DataGrid height="207" width="99%" 
						id="dgChildData"
						dataProvider="{selectedRecipeEffects}"
						itemClick="childBindSelected()">
						<mx:columns>
							<mx:DataGridColumn headerText="Ид.Номер" dataField="id" width="40"/>
							<mx:DataGridColumn headerText="Продукт" labelFunction="getProductTypeName" width="150"/>
							<mx:DataGridColumn headerText="Потребляемый" labelFunction="util.consumedToString" width="150"/>
							<mx:DataGridColumn headerText="Формула рез-та" dataField="resultFormula" width="65"/>
						</mx:columns>
					</mx:DataGrid>				
			<mx:VBox height="104" width="297">
				<mx:FormItem label="Ресурс:" width="296">
					<mx:ComboBox id="cbChildProductType"
						dataProvider="{availableProductTypes}"
						labelField="name" width="210"/>				
				</mx:FormItem>
				<mx:FormItem label="Потребляемый:"
					required="true">
					<mx:CheckBox id="cbChildConsumed"/>
				</mx:FormItem>
				<mx:FormItem label="Формула:">
					<mx:TextInput id="tiChildResultFormula" width="216"/>				
				</mx:FormItem>
				<mx:HBox>
					<mx:Button label="Новый" click="childCreateNew()"/>
					<mx:Button label="Сохранить" click="childSave()"/>
					<mx:Button label="Отмена" click="childBindSelected()"/>				
				</mx:HBox>		
			</mx:VBox>	
						
		</mx:HBox>
		<mx:DataGrid dataProvider="{errors}"
				visible="{errors.length>0}"
				width="100%"
				height="60">
				<mx:columns>
					<mx:DataGridColumn headerText="Ошибки"
						 dataField="message"/>
				</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
</mx:VBox>