<?xml version="1.0" encoding="utf-8"?>
<mx:VBox horizontalAlign="center"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:comp="components.*"
	xmlns:util="components.util.*"
	creationComplete="init()" width="974" 
	verticalAlign="top"
	height="100%">
	<!-- represents selected main item: Recipe -->
	<mx:Model id="formModel">		
		<root>
			<mode>EDIT</mode>			
			<id></id>
			<active>{cbActive.selected == true ? "1" : "0"}</active>
			<name>{encodeURIComponent(tiName.text)}</name>
			<time>{tiTime.text}</time>
			<formula>{encodeURIComponent(tiFormula.text)}</formula>
		</root>		
	</mx:Model>		
	
	<!-- represents selected subItem: RecipeEffect -->
	<mx:Model id="childModel">
		<root>
			<mode>EDIT</mode>
			
			<id></id>
			<consumed>{cbChildConsumed.selected == true ? "1" : "0"}</consumed>
			<recipe>{dgData.selectedItem.id}</recipe>		
			<productType>{cbChildProductType.selectedItem.id}</productType>
		</root>					
	</mx:Model>
			
	<!-- represents selected subSubItem: RecipeEffectPart -->
	<!-- this approach seems to be less and less confident:) -->
	<mx:Model id="childPartModel">
		<root>
			<mode>EDIT</mode>
			
			<id></id>
			<recipeEffect></recipeEffect>
			<multiplicator>{tiEffectPartMultiplicator.text}</multiplicator>
			<parameter>{cbEffectPartParam.selectedItem.id}</parameter>
		</root>					
	</mx:Model>
	<mx:HTTPService id="mainSvc" 
		useProxy="false"
		method="GET"		
		result="httpResultHandler(event)"
		fault="util.httpFaultHandler(event)"/>
	<mx:HTTPService id="childSvc" 
		useProxy="false"
		method="GET"		
		result="httpResultHandler(event)"
		fault="util.httpFaultHandler(event)"/>
	<mx:HTTPService id="childPartSvc" 
		useProxy="false"
		method="GET"
		url="{svcUrl.recipeEffectPartSvcUrl}"		
		result="httpResultHandler(event)"
		fault="util.httpFaultHandler(event)"/>

	<mx:VBox horizontalAlign="center" width="100%">	
	<mx:Script>
		<![CDATA[
			import mx.validators.NumberValidator;
			import flash.sampler.NewObjectSample;
			import mx.events.CollectionEvent;
			import mx.automation.codec.ArrayPropertyCodec;
			import mx.validators.RegExpValidator;
			import mx.utils.StringUtil;
			import mx.rpc.http.mxml.HTTPService;
			import flash.sampler.getInvocationCount;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import components.Util;
			import components.SvcUrl;
			public var mainDataSvcUrl:String;
			public var childDataSvcUrl:String;
			public var hideEffect:*;
			[Bindable]
            private var mainData:ArrayCollection = new ArrayCollection();                  

			[Bindable] private var devices:ArrayCollection = new ArrayCollection();
			[Bindable] private var availableParameters:ArrayCollection = new ArrayCollection();
			[Bindable] private var parameters:ArrayCollection = new ArrayCollection();
			[Bindable] private var selectedParameters:ArrayCollection = new ArrayCollection();
            
   			[Bindable] private var productTypes:ArrayCollection = new ArrayCollection();           
            [Bindable] private var availableProductTypes:ArrayCollection = new ArrayCollection();
            
			[Bindable] private var recipeEffects:ArrayCollection = new ArrayCollection();
			[Bindable] private var selectedRecipeEffects:ArrayCollection = new ArrayCollection();
			
			[Bindable] private var recipeEffectParts:ArrayCollection = new ArrayCollection();
			[Bindable] private var selectedRecipeEffectParts:ArrayCollection = new ArrayCollection();          
											
			[Bindable]
	        private var errors:ArrayCollection = new ArrayCollection(); 
	         private var todayDate:*;         
			
			var util:Util = new Util();
			var svcUrl:SvcUrl = new SvcUrl();
			function childBindSelected(){
				var item = dgChildData.selectedItem;
				if (item != null){
					childModel.id = item.id;
					childPartModel.recipeEffect = dgChildData.selectedItem.id;
					cbChildProductType.selectedIndex = util.getItemPos(availableProductTypes, item.productType);					
					cbChildConsumed.selected = (item.consumed ==1);
					
					selectedRecipeEffectParts.removeAll();
					for each (var recipeEffectPart in recipeEffectParts){
						if (recipeEffectPart.recipeEffect == dgChildData.selectedItem.id){
							selectedRecipeEffectParts.addItem(recipeEffectPart);
						}
					}
					selectedRecipeEffectParts.refresh();	
				}
			}				
			function childSave(){
				validateChild();
				if (btnChildSave.enabled) {
					childSvc.cancel();
					childSvc.send(childModel);
				}
			}

			function getProductTypeName(item:Object, column:DataGridColumn):String{				
				var tmp = util.getItemById(productTypes, item.productType);
				if (tmp == null) {
					return "";
				} else {
					return tmp.name;
				}					
			}
			
			public function init():void{
				createNew();		
				childCreateNew();
				childPartCreateNew();
				mainSvc.url = svcUrl.mainRecipeSvcUrl;
				childSvc.url = svcUrl.childRecipeSvcUrl;		
				mainSvc.cancel();
				formModel.mode="FETCH";
				mainSvc.send(formModel);				
			}

			private function httpResultHandler(event:*):void{
				saveSelectionState();
				errors = util.getHttpRespondedErrors(event);
					todayDate = event.result.currentDate;
				lbToday.text = todayDate.toString();
				
				productTypes = util.extractItemCollection(event.result.productTypes, 'producttype');
				recipeEffects = util.extractItemCollection(event.result.recipeEffects, 'recipeeffect');
				parameters = util.extractItemCollection(event.result.deviceParameters, 'deviceparameter');
				devices = util.extractItemCollection(event.result.devices, 'device');
				recipeEffectParts = util.extractItemCollection(event.result.recipeEffectParts, 'recipeeffectpart');
				            	            
				availableProductTypes = util.getActiveItems(productTypes);
				availableParameters = util.getActiveItems(parameters);
				
				for each (var param in availableParameters){
					param.devicename = util.getItemById(devices, param.device).name;	
				}
								
				if (availableParameters != null){
					availableParameters.filterFunction = singleDeviceFilterFunction;
					availableParameters.refresh();
				}
													            
				mainData = util.extractItemCollection(event.result.recipes, 'recipe');				
				
				loadSelectionState();
			} 
			private var selectedMainId:int=-1;
			private var selectedParamId:int=-1;
			private var selectedEffectId:int=-1;
			private function saveSelectionState():void{
				if (dgData.selectedItem != null) {
					selectedMainId = dgData.selectedItem.id;
				}
				if (dgChildData.selectedItem != null) {
					selectedParamId = dgChildData.selectedItem.id;
				}
				if (dgChildPartEffects.selectedItem != null) {
					selectedEffectId = dgChildPartEffects.selectedItem.id;
				}
			}
			private function singleDeviceFilterFunction(item:*):Boolean{
				if ((dgData.selectedItem != null) && (dgData.selectedItem.parameters != null)){
					var param = dgData.selectedItem.parameters.parameter;
					var id = null;
					if (param instanceof ArrayCollection) {
						id = param.getItemAt(0).id
					} else {
						id = param.id;
					}
					var param = util.getItemById(parameters, id);
					var deviceid=null;
					if (param!=null){
						deviceid = param.device;
					} else {
						return true;
					}
					if (deviceid == null)
						return true;
					if (deviceid == item.device) {
						return true;
					} else {
						return false;
					}					
				} else {
					return true;
				}
			}
			private function loadSelectionState():void{
				if (selectedMainId>-1) {
					dgData.selectedIndex = util.getItemPos(mainData, selectedMainId);			
					bindSelected();
				}
				if (selectedParamId>-1) {
					dgChildData.selectedIndex = util.getItemPos(selectedRecipeEffects, selectedParamId);
					childBindSelected();
				}			
				if (selectedEffectId>-1) {
					dgChildPartEffects.selectedIndex = selectedEffectId;
					childPartBind();
				}
			}
			private function bindSelected():void{				
				if ((dgData.selectedIndex >= 0)) {
					cbActive.selected = (dgData.selectedItem.active == 1);
																			
					tiName.text=dgData.selectedItem.name;
					tiTime.text=dgData.selectedItem.time;
					tiFormula.text=dgData.selectedItem.formula;
					
					availableParameters.refresh();
					
					selectedParameters.removeAll();				
					if ((dgData.selectedItem.parameters != null) && (dgData.selectedItem.parameters.parameter!=null)){
						if (dgData.selectedItem.parameters.parameter instanceof ArrayCollection){
							for each (var p in dgData.selectedItem.parameters.parameter) {
								var item = new Object();
								var param = util.getItemById(parameters, p.id);
								var device = util.getItemById(devices, param.device);
								item.parameter = param;
								item.device = device;
								item.paramname = param.name;
								item.devicename = device.name;
								item.id = param.id;
								item.textView = param.textView;
								selectedParameters.addItem(item);
							}
						} else {
							var item = new Object();
							var p = dgData.selectedItem.parameters.parameter;
							var param = util.getItemById(parameters, p.id);
							if (param != null){
								var device = util.getItemById(devices, param.device);
								item.id = param.id;
								item.parameter = param;
								item.device = device;
								item.paramname = param.name;
								item.devicename = device.name;	
								item.textView = param.textView;						
								selectedParameters.addItem(item);
							}
						}
						
					}					
					selectedParameters.refresh();	
					
					selectedRecipeEffects.removeAll();
					formModel.id = dgData.selectedItem.id;
					childModel.recipe = formModel.id;				
					for each (var recipeEffect in recipeEffects){
						if (recipeEffect.recipe == dgData.selectedItem.id){
							selectedRecipeEffects.addItem(recipeEffect);
						}
					}
					selectedRecipeEffects.refresh();												
				}													
			}
			private function createNew():void{
				formModel.id="";
				cbActive.selected=true;				
				formModel.mode="NEW";			
				tiFormula.text="";
				tiName.text="";
			}
			private function childCreateNew():void{
				childModel.id=null;			
				cbChildProductType.selectedIndex = -1;				
			}
			private function childPartCreateNew():void{
				childPartModel.id=null;			
				cbEffectPartParam.selectedIndex=-1;
				tiEffectPartMultiplicator.text="1";
			}
			private function childPartSave():void{
				childPartModel.mode="EDIT";
				childPartSvc.cancel();
				childPartSvc.send(childPartModel);
			}
			private function childPartDelete():void{
				childPartModel.mode="DELETE";
				childPartSvc.cancel();
				childPartSvc.send(childPartModel);
			}
			private function childPartBind():void{
				if ((dgChildPartEffects.selectedItem != null)) {
					var item = dgChildPartEffects.selectedItem;
					childPartModel.id = item.id;
					if (dgChildData.selectedItem != null) {
						childPartModel.recipeEffect = dgChildData.selectedItem.id;
					} else {
						childPartModel.recipeEffect = null;
					}
					tiEffectPartMultiplicator.text = item.multiplicator;
					cbEffectPartParam.selectedIndex = util.getItemPos(selectedParameters, item.parameter);								
				}
			}
			private function cancel():void{
				formModel.id="";
				bindSelected();
			}
			private function saveSelected():void{
				formModel.mode="EDIT";
				mainSvc.cancel();	
				mainSvc.send(formModel);
			}
			private function addDeviceParameter():void{			
				if (dgAvailableParameters.selectedIndex>-1) {
					formModel.mode="SPECIAL_ADD";
					if (dgData.selectedItem!= null) {					
						formModel.id = dgData.selectedItem.id;
					}
					formModel.spec_id = dgAvailableParameters.selectedItem.id;
					mainSvc.cancel();
					mainSvc.send(formModel);		
				}	
			}
			private function removeDeviceParameter():void{
				if (dgCurrentParameters.selectedIndex>-1) {
					formModel.id = dgData.selectedItem.id;
					formModel.spec_id = dgCurrentParameters.selectedItem.parameter.id;
					formModel.mode="SPECIAL_REMOVE";
					mainSvc.cancel();
					mainSvc.send(formModel);							
				}
			}
			private function getParameterName(item:Object, column:DataGridColumn):String{				
				if (item.parameter == null){
					return "1"
				} else {
					var param = util.getItemById(parameters, item.parameter);
					if (param == null) {
						return "";
					} else {
						return param.textView;
					}
				}
			}
			private function validateChild():void{
				var valid:Boolean = true;								
				 
				if (valid) {
					btnChildSave.enabled=true;
				} else {
					btnChildSave.enabled=false;
				}
			}
		]]>
	</mx:Script>				
		<mx:HBox>				
			<mx:Label text="Панель управления рецептами" fontFamily="Verdana" fontWeight="bold" fontSize="14"/>
			<util:ContextHelpButton>
<util:helpText>
					<![CDATA[
Производство некоторого типа продукции определенным образом задействует технологические мощности завода.
Сущность предметной области, описывающая задействованную продукцию, зависимости между измеренными значениями
определенных технологических параметров, количествами потребленных ресурсов и произведенной продукции называется
<B>Рецепт</B>.   
						
В одном технологическом цикле может использоваться только одно <B>Устройство</B>. Каждое устройство имеет ряд
измеримых величин, называемых <B>Параметр производства</B>. В определенный момент времени каждый параметр
имеет фиксированное значение. Соответственно количества произведенных товаров и потребленных ресурсов
(<B>Эффекты производства</B>) зависит от значений этих параметров.
<P>Перед началом производственного цикла, необходимые количества ресурсов будут изьяты со склада.
В течении производственного цикла, устройство не может быть задействовано для других действий.
По окончании производственного цикла, произведенные ресурсы будут переведены на склад.
<BR/></BR>
<B><U>Пример:</U></B>
В печи из муки и воды производится хлеб.
<B>Производственные параметры печи:</B>						
<B>Температура</B>
Рекомендуемое значение: 140
Подлежит минимизации: Да
Может быть изменен нами: Да

<B>Колебания температуры</B>
Рекомендуемое значение: 5
Подлежит минимизации: Да
Может быть изменен нами: Нет

<B>Эффекты рецепта</B>
<B>Потребление муки</B><BR/>
Входной: да
Формула: 5
<B>Произведенный хлеб</B>
Входной: Нет
Формула: 5-0.08*{2}
<BR/></BR>
Это означает, что из 5 едениц муки будет получено 5 едениц хлеба в случае, если колебания температуры будут равны 0.]]>
			</util:helpText>					
			</util:ContextHelpButton>	
				<mx:Label text="Сегодня : "/>
		<mx:Label text="" id="lbToday"/>
							
		</mx:HBox>
		<mx:HBox width="95%" height="100%">
			<mx:VBox width="462" horizontalAlign="left" >
					<mx:DataGrid height="99" width="456" 
						id="dgData" 
						dataProvider="{mainData}"
						itemClick="bindSelected()">
						<mx:columns>
							<mx:DataGridColumn headerText="Ид.Номер" dataField="id" width="65"/>
							<mx:DataGridColumn headerText="Название" dataField="name" width="150"/>
							<mx:DataGridColumn headerText="Вр.созд." dataField="time" width="60"/>
							<mx:DataGridColumn headerText="Описание" dataField="formula" width="100"/>
							<mx:DataGridColumn headerText="Активн." labelFunction="util.activeToString" width="55"/>
						</mx:columns>
					</mx:DataGrid>
					<mx:VBox horizontalAlign="left" 
						 width="100%"
						 height="143">

						<mx:FormItem label="Активно:"
							required="true" width="110">
							<mx:CheckBox id="cbActive"/>
						</mx:FormItem>
						<mx:FormItem
							direction="horizontal"
							label="Время:" 
							required="true" 
							width="100%">
							<mx:TextInput id="tiTime" width="100%"/>
							<util:ContextHelpButton helpText="Время выполнения в минутах. &lt;BR&gt;Должно целым числом больше нуля."/>
						</mx:FormItem>
						<mx:FormItem
							label="Название:"
							direction="horizontal"
							width="100%"
							required="true">												
							<mx:TextInput id="tiName" width="100%" height="25"/>							
						</mx:FormItem>
						<mx:FormItem
							direction="horizontal"
							label="Описание:"
							width="100%">												
							<mx:TextArea id="tiFormula" width="100%" height="25"/>
							<util:ContextHelpButton helpText="Описание рецепта"/>
						</mx:FormItem>
						<mx:HBox width="260">
						<mx:Button label="Сохранить" click="saveSelected()"/>							
						<mx:Button label="Отмена" click="cancel()"/>
						<mx:Button label="Создать" click="createNew()"/>
					</mx:HBox>
				</mx:VBox>				
			</mx:VBox>			
			<mx:HBox width="477" height="240">
				<mx:VBox width="204" height="234" horizontalAlign="center">
					<mx:Label text="Параметры, касающиеся рецепта"/>
					<mx:DataGrid width="182" height="206"
						dataProvider="{selectedParameters}"
						id="dgCurrentParameters">
						<mx:columns>
							<mx:DataGridColumn headerText="id" dataField="id"/>
							<mx:DataGridColumn headerText="Устройство" dataField="devicename"/>
							<mx:DataGridColumn headerText="Параметр" dataField="paramname"/>
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
				<mx:VBox width="47" height="223" verticalAlign="center"
					horizontalAlign="center">													
					<mx:Button label="&lt;" click="addDeviceParameter()"/>
					<mx:Button label="&gt;" click="removeDeviceParameter()"/>
					<util:ContextHelpButton>
					<util:helpText>
<![CDATA[
В правой таблице находится список всех доступных для выбора параметров.
В левой таблице находится список параметров, от которых зависит производственный процесс,
описываемый этим рецептом.

Один производственный процесс может использовать только одно устройство!  
]]>
			</util:helpText>					
					</util:ContextHelpButton>
				</mx:VBox>
				<mx:VBox width="203" height="236" horizontalAlign="center">
					<mx:Label text="Все актуальные параметры"/>
					<mx:DataGrid width="185" height="206" 
						dataProvider="{availableParameters}"
						id="dgAvailableParameters">
						<mx:columns>
							<mx:DataGridColumn headerText="Устройство" dataField="devicename"/>
							<mx:DataGridColumn headerText="Параметр" dataField="name"/>
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:HBox>
		</mx:HBox>
	</mx:VBox>
	<mx:VBox
		width="98%"
		verticalAlign="bottom"
		height="100%"
		horizontalAlign="center">		
		<mx:Text
			htmlText="&lt;B&gt;Потребляемые и производимые ресурсы:&lt;/B&gt;"
			/>				
		<mx:HBox 
			width="100%"
			height="100%"
			verticalAlign="bottom">		
					<mx:DataGrid height="100%" width="99%" 
						id="dgChildData"
						dataProvider="{selectedRecipeEffects}"
						itemClick="childBindSelected()">
						<mx:columns>
							<mx:DataGridColumn headerText="Ид.Номер" dataField="id" width="40"/>
							<mx:DataGridColumn headerText="Продукт" labelFunction="getProductTypeName" width="150"/>
							<mx:DataGridColumn headerText="Потребляемый" labelFunction="util.consumedToString" width="150"/>
							<mx:DataGridColumn headerText="Формула рез-та" dataField="resultFormula" width="65"/>
						</mx:columns>
					</mx:DataGrid>				
			<mx:VBox height="90%" width="50%"
				verticalAlign="bottom">
				<mx:VBox
					height="100%"
					width="100%"
					verticalAlign="top">					
					<mx:HBox 
						width="100%"
						horizontalAlign="right">						
						<util:ContextHelpButton>
<util:helpText>
<![CDATA[
Данная часть окна используется для управления потребленными ресурсами и произведенными продуктами.

Суммарная себестоимость произведенной продукции должна быть не меньше суммарной стоимости 
потребленных ресурсов.	

Поле "Формула" используется для введения количества произведенной продукции\потребленных ресурсов.
<b>Возможные значения поля:</b>
<li>Постоянное значение</li>Число действительного типа. 
   
<li>Выражение, зависящее от производственных параметров</li>Линейное выражение, зависящее от производственных параметров, которые включены в список
 параметров, влияющих на протекание технологического процесса, описываемого этим рецептом.
 	При этом, допустимыми операциями являются '+', '-', '*'.
 	 
 	Значение производственного параметра, имеющего идентификатор в базе, равный <B>X</B> на
 момент начала производственного цикла в формуле должно иметь вид '{<B>X</B>}'.  

<B>Пример №1:</B>
25.75+{3}-0.008*{11}

<B>Пример №2:</B>
23.28]]>					
</util:helpText>
						</util:ContextHelpButton>
					</mx:HBox>
				</mx:VBox>										
				<mx:FormItem label="Ресурс:"
					width="90%"
					required="true"
					direction="horizontal">
					<mx:ComboBox id="cbChildProductType"
						dataProvider="{availableProductTypes}"
						labelField="name" width="100%"/>				
				</mx:FormItem>
				<mx:FormItem label="Потребляемый:"
					direction="horizontal"
					width="90%">
					<mx:CheckBox id="cbChildConsumed"/>
				</mx:FormItem>
				<mx:HBox
					width="90%"
					horizontalAlign="center">
					<mx:Button label="Новый" click="childCreateNew()"/>
					<mx:Button 
						id="btnChildSave"
						label="Сохранить"						
						click="childSave()"/>
					<mx:Button label="Отмена" click="childBindSelected()"/>				
				</mx:HBox>		
				<mx:FormItem label="Формула:"
					direction="horizontal"
					required="true"
					width="90%">
					<mx:DataGrid
						dataProvider="{selectedRecipeEffectParts}" width="158"
						click="childPartBind()"
						id="dgChildPartEffects">
						<mx:columns>
							<mx:DataGridColumn headerText="Множитель" dataField="multiplicator" width="30"/>
							<mx:DataGridColumn headerText="Параметр" labelFunction="getParameterName"/>
						</mx:columns>
					</mx:DataGrid>
					<mx:VBox 
						height="100%"
						width="100%">
						<mx:FormItem
							width="100%"
							label="Параметр">												
							<mx:ComboBox
								id="cbEffectPartParam"
								labelField="textView"
								dataProvider="{selectedParameters}"
								width="100%">
							</mx:ComboBox>
						</mx:FormItem>
						<mx:FormItem
							label="Множитель">												
							<mx:TextInput
								id="tiEffectPartMultiplicator"/>
						</mx:FormItem>
						<mx:HBox width="100%">											
							<mx:Button
								label="Сохранить"
								click="childPartSave()">							
							</mx:Button>
							<mx:Button
								label="Удалить"
								click="childPartDelete()">							
							</mx:Button>
							<mx:Button
								label="Новый"
								click="childPartCreateNew()">							
							</mx:Button>
						</mx:HBox>
					</mx:VBox>
				
				</mx:FormItem>
			</mx:VBox>	
						
		</mx:HBox>
		<mx:DataGrid dataProvider="{errors}"
				visible="{errors.length>0}"
				width="100%"
				height="60">
				<mx:columns>
					<mx:DataGridColumn headerText="Ошибки"
						 dataField="message"/>
				</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
</mx:VBox>