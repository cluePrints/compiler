<?xml version="1.0" encoding="utf-8"?>
<mx:VBox horizontalAlign="center"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	creationComplete="init()" width="100%" height="100%" xmlns:util="components.util.*">

		
		<mx:HTTPService id="mainSvc" 
		useProxy="false"
		method="GET"
		url="{mainDataSvcUrl}"
		result="httpResultHandler(event)"
		fault="httpFaultHandler(event)"/>
		
		<mx:Model id="formModel">		
		<root>
			<mode>{tiId.text as int>0 ? tiMode.text : &quot;NEW&quot;}</mode>
			<id>{tiId.text}</id>
			<destinationAccount>{cbDestinationAccount.selectedItem.id}</destinationAccount>
			<sourceAccount>{cbSourceAccount.selectedItem.id}</sourceAccount>
			<amount>{tiAmount.text}</amount>		
			<active>{cbActive.selected == true ? "1" : "0"}</active>	
			<date>{dfDate.text}</date>
			<order>{cbOrder.selectedItem.id}</order>
			<price>{cbPriceItem.selectedItem.id}</price>
			<desc>{encodeURIComponent(tiDesc.text)}</desc>
			
		</root>		
	</mx:Model>	
		
	<mx:Script>
		<![CDATA[
			import mx.events.CollectionEvent;
			import mx.automation.codec.ArrayPropertyCodec;
			import mx.validators.RegExpValidator;
			import mx.utils.StringUtil;
			import mx.rpc.http.mxml.HTTPService;
			import flash.sampler.getInvocationCount;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import components.Util;
			import components.SvcUrl;
			public var mainDataSvcUrl:String;
			public var mainDataUnitName:String;
			public var mainDataUnitVisualName:String;
			public var hideEffect:*;
			[Bindable] private var mainData:*;
			[Bindable] private var accounts:*;   
            [Bindable] private var availableAccounts:ArrayCollection;
            [Bindable] private var orders:*;   
            [Bindable] private var availableOrders:ArrayCollection;
            [Bindable] private var priceItems:*;   
            [Bindable] private var availablePriceItems:ArrayCollection;
            [Bindable] private var errors:ArrayCollection = new ArrayCollection();
            private var todayDate:*;
            	var util:Util = new Util();
            	var svcUrl:SvcUrl = new SvcUrl();	
			public function init():void{
				createNew();				
				mainSvc.cancel();
				mainSvc.url = svcUrl.moneyMoveSvcUrl;
				formModel.mode="FETCH";
				mainSvc.send(formModel);
					
			}
			
			private function httpFaultHandler(event:Event):void{
					 mx.controls.Alert.show(event.toString())	;
				
			} 
			 
			private function httpResultHandler(event:*):void{	
				errors = util.getHttpRespondedErrors(event);
				todayDate = event.result.currentDate;
				lbToday.text = todayDate.toString();
				accounts = util.extractItemCollection(event.result.accounts, 'account');	
				availableAccounts = util.getActiveItems(accounts);
				
				orders = util.extractItemCollection(event.result.orders, 'order');
				
				availableOrders = util.getActiveItems(orders);	
			
				priceItems = util.extractItemCollection(event.result.priceListItems, 'pricelistitem');
				availablePriceItems = util.getActiveItems(priceItems);	
			
				mainData = event.result.mainData;
				
				if (mainData != null ) {
					mainData['moneymove'].filterFunction = mainFilterFunction;
				}
			} 
			private function mainFilterFunction(item:*){
				var result:Boolean=true;
				if (!cbShowNonActive.selected && item.active<=0)
					return false;
				if (!cbShowActive.selected && item.active>0)
					return false;					
				if (mx.utils.StringUtil.trim(edFilter.text).length>0) {
					if (!new RegExp(edFilter.text).test(item.provider))
						return false;
				}
				return result;
			} 
			function bindSelected():void{
				var item = dgData.selectedItem;
				if (dgData.selectedIndex>=0){
				cbActive.selected = (dgData.selectedItem.active == 0);
				tiId.text=dgData.selectedItem.id;
				dfDate.text = dgData.selectedItem.date;
				tiDesc.text = dgData.selectedItem.desc;
				cbDestinationAccount.selectedIndex = util.getItemPos(availableAccounts, item.destinationAccount);
				cbSourceAccount.selectedIndex = util.getItemPos(availableAccounts, item.sourceAccount);
				tiAmount.text = dgData.selectedItem.amount;
				cbOrder.selectedIndex = util.getItemPos(availableOrders, item.order);
				cbPriceItem.selectedIndex = util.getItemPos(availablePriceItems, item.price);
				
				}													
			}
			function createNew():void{
				tiId.text="";
				tiAmount.text = "";
				tiDesc.text = "";
				dfDate.text = "";
				cbActive.selected=true;
				formModel.mode="NEW";
						
			}
			function cancel():void{
				bindSelected();
			}
			function saveSelected():void{
				
				formModel.mode="EDIT";
				mainSvc.cancel();	
				mainSvc.send(formModel);
			
				
			}
			function filterRefresh():void{
				mainData['maneymove'].refresh();
			}
			function activeToString(item:Object, column:DataGridColumn):String{				
				return (item.active>0 ? "-" : "+"); 
				
				
			}
			function getDestAccountName(item:Object, column:DataGridColumn):String{	
				var tmp = util.getItemById(accounts, item.destinationAccount);
				if (tmp == null) {
					return "";
				} else {
					return tmp.name;
				}					
			}
				function getSourceAccountName(item:Object, column:DataGridColumn):String{	
				var tmp = util.getItemById(accounts, item.sourceAccount);
				if (tmp == null) {
					return "";
				} else {
					return tmp.name;
				}					
			}
			function getOrderName(item:Object, column:DataGridColumn):String{
				
				var tmp = util.getItemById(orders, item.id);
				if (tmp == null) {
					return "";
				} else {
					return tmp.textView;
				}	
			}
			function getPriceName(item:Object, column:DataGridColumn):String{
				
				var tmp = util.getItemById(priceItems, item.id);
				if (tmp == null) {
					return "";
				} else {
					return tmp.textView;
				}	
			}
			
		]]>
	</mx:Script>			
	<mx:HBox>
		<mx:Label text="Панель управления движением денег" fontWeight="bold" fontSize="14"/>
	<util:ContextHelpButton>
		<util:helpText>
			 <![CDATA[
			 Панель отображающая движени денег(денежные переводы).
			 Перевод денег с одного счета на второй отображает оплату.
			 Если перевод не содержит даты - значит деньги еще не были перечислены, и перевод неактивен.
			 Как только конт-т проплатит необходимую сумму в двидении проставляется дата оплаты и движение становится активным.
			 Каждому двидению денег соответствует заказ, на основе которого собственно и формируется сумма перевода и счета с которого и на который будут перечислены средства.
			 Заказ не будет выполнем до тех пор пока движение денег по этому заказу не станет активным( пока не появится дата проплаты).
					]]>
		</util:helpText>
	</util:ContextHelpButton>
	<mx:Label text="Сегодня : "/>
		<mx:Label text="" id="lbToday"/>
	</mx:HBox>
		<mx:VBox  width="100%">
		<mx:HBox x="0" y="0" width="98%" height="460">
			<mx:VBox height="433" width="779" horizontalAlign="center" >
			
				<mx:DataGrid height="282" width="756" 
					id="dgData" 
					dataProvider="{mainData['moneymove']}"
					itemClick="bindSelected()">
					<mx:columns>
						<mx:DataGridColumn headerText="Ид.Номер"  dataField="id"  width="55"/>
						<mx:DataGridColumn headerText="Счет назначения"  dataField="destinationAccount"  labelFunction="getDestAccountName" width="100"/>
						<mx:DataGridColumn headerText="Счет-источник"  dataField="sourceAccount" labelFunction="getSourceAccountName" width="100"/>
						<mx:DataGridColumn headerText="К-во един. продукта" dataField="amount"   width="70"/>
						<mx:DataGridColumn headerText="Дата перевода " dataField="date" width="80"/>
						<mx:DataGridColumn headerText="Заказ" dataField="order" labelFunction="getOrderName" width="60"/>
						<mx:DataGridColumn headerText="Прайс" dataField="price" labelFunction="getPriceName" width="60"/>
						<mx:DataGridColumn headerText="Описание" dataField="desc" width="70"/>
						<mx:DataGridColumn dataField="Оплачен" labelFunction="activeToString" width="55"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:HBox width="743" height="99">
				<mx:VBox>
					<mx:FormItem label="Счет назначения:" 
						required="true">												
						<mx:ComboBox id="cbDestinationAccount"
							dataProvider="{availableAccounts}"
							labelField="textView" 
							width="150"/>
					</mx:FormItem>
					<mx:FormItem label="Счет-источник:" 
						required="true">												
						<mx:ComboBox id="cbSourceAccount"
							dataProvider="{availableAccounts}"
							labelField="textView" 
							width="150"/>
					</mx:FormItem>
					<mx:FormItem label="Количество единиц продукта:" required="true"  width="264">
						<mx:TextInput id="tiAmount" width="75">
						</mx:TextInput>
					</mx:FormItem>
				</mx:VBox>
				<mx:VBox height="100%" width="246">
						<mx:FormItem label="Дата перевода:" 
						required="true">	
					<mx:DateField id="dfDate"
							text=""
							formatString="DD/MM/YY"/>
						</mx:FormItem>
						<mx:FormItem label="Заказ:" 
						required="true">												
						<mx:ComboBox id="cbOrder"
							dataProvider="{availableOrders}"
							labelField="textView" 
							width="150"/>
					</mx:FormItem>
					<mx:FormItem label="Описание:" >
						<mx:TextInput id="tiDesc">
						</mx:TextInput>
					</mx:FormItem>
				</mx:VBox>
				<mx:VBox height="95" width="186">
					<mx:FormItem label="Прайс" width="182">
					<mx:ComboBox id="cbPriceItem"
							dataProvider="{availablePriceItems}"
							labelField="textView" 
							width="100"/>
					</mx:FormItem>
				
				<mx:FormItem label="Оплачен" width="111">
					<mx:CheckBox id="cbActive"  />
					</mx:FormItem>
				</mx:VBox>
				</mx:HBox>
				<mx:HBox width="100%" height="27">
					<mx:Button label="Сохранить" click="saveSelected()" width="173"/>
					<mx:Button label="Отмена" click="cancel()" width="173"/>
					<mx:Button label="Создать" click="createNew()" width="173"/>
				</mx:HBox>
			</mx:VBox>			
			<mx:VBox height="232" horizontalAlign="center" verticalAlign="center" width="259">				
				<mx:VBox horizontalAlign="left" height="17" width="232">	
					<mx:TextInput id="tiMode" visible="false" text="EDIT"/>
					<mx:TextInput id="tiId" visible="false" text=""/>
					
					
				</mx:VBox>
				
				<mx:VBox id="filterPanel">
					<mx:Script>
						<![CDATA[
							[Bindable]
							public var filterPanelMinimized:Boolean=true;							
						]]>
					</mx:Script>
					<mx:HBox horizontalAlign="right" width="100%">
						<mx:FormItem label="Фильтр:" width="250">
							<mx:Button id="filterButton" label="{filterPanelMinimized ? &quot;-&quot; : &quot;+&quot;}" click="filterPanelMinimized = !filterPanelMinimized" width="96"/>
						</mx:FormItem>												
					</mx:HBox>					
					<mx:VBox id="filterDetails" visible="{filterPanelMinimized ? false : true}">												
						<mx:FormItem label="Показывать:" horizontalAlign="left" width="100%">
							<mx:CheckBox id="cbShowActive" click="filterRefresh()" selected="true" label="Активные"/>
							<mx:CheckBox id="cbShowNonActive" click="filterRefresh()" selected="true" label="Неактивные"/>
						</mx:FormItem>
						
						<mx:FormItem label="Шаблон имени:" >
							<mx:TextInput id="edFilter" text=".*" change="filterRefresh()" width="141"/>									
						</mx:FormItem>	
					</mx:VBox>					
				</mx:VBox>
			</mx:VBox>
		</mx:HBox>
		
		
		<mx:DataGrid dataProvider="{errors}"
			visible="{errors.length>0}"
			width="910" height="84">
			<mx:columns>
				<mx:DataGridColumn headerText="Ошибки"
					 dataField="message"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
	</mx:VBox>
