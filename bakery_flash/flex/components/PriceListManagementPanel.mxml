<?xml version="1.0" encoding="utf-8"?>
<mx:VBox horizontalAlign="center"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:comp="components.*"
	creationComplete="init()" width="974" height="595">
	<!-- represents selected main item: PriceList -->
	<mx:Model id="formModel">		
		<root>
			<mode>EDIT</mode>			
			<id></id>
			<active>{cbActive.selected == true ? "1" : "0"}</active>
			<date>{dfDate.text}</date>
			<owner>{cbOwner.selectedItem.id}</owner>			
			<comment>{encodeURI(tiComment.text)}</comment>				
		</root>		
	</mx:Model>		
	<!-- represents selected subItem: PriceListItem -->
	<mx:Model id="childModel">
		<root>
			<mode>EDIT</mode>
			
			<id></id>
			<active>{cbChildActive.selected == true ? "1" : "0"}</active>
			
			<parent></parent>
			
			<price>{encodeURI(tiChildPrice.text)}</price>
			<product>{cbChildProductType.selectedItem.id}</product>
		</root>					
	</mx:Model>
	<mx:HTTPService id="mainSvc" 
		useProxy="false"
		method="GET"
		url="{mainDataSvcUrl}"
		result="httpResultHandler(event)"
		fault="util.httpFaultHandler(event)"/>
	<mx:HTTPService id="childSvc" 
		useProxy="false"
		method="GET"
		url="{childDataSvcUrl}"
		result="httpChildResultHandler(event)"
		fault="util.httpFaultHandler(event)"/>
	<mx:VBox horizontalAlign="center">	
	<mx:Script>
		<![CDATA[
			import mx.events.CollectionEvent;
			import mx.automation.codec.ArrayPropertyCodec;
			import mx.validators.RegExpValidator;
			import mx.utils.StringUtil;
			import mx.rpc.http.mxml.HTTPService;
			import flash.sampler.getInvocationCount;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import components.Util;
			public var mainDataSvcUrl:String;
			public var childDataSvcUrl:String;
			public var hideEffect:*;
			[Bindable]
            private var mainData:*;
            
            [Bindable] private var units:ArrayCollection;            
            [Bindable] private var availableUnits:ArrayCollection;
            
            [Bindable] private var contragents:ArrayCollection;            
            [Bindable] private var availableContragents:ArrayCollection;

            [Bindable] private var addresses:ArrayCollection;            

			[Bindable] private var productTypes:ArrayCollection;            
            [Bindable] private var availableProductTypes:ArrayCollection;
            
			[Bindable] private var priceListItems:ArrayCollection;
			[Bindable] private var selectedPriceListItems:ArrayCollection = new ArrayCollection();            
			
			// XXX: It's dumb, change it
			var util:Util = new Util();
			
			function childBindSelected(){
				var item = dgChildData.selectedItem;
				if (item != null){
					cbChildActive.selected = (item.active == 1);
					childModel.id = item.id;
					cbChildProductType.selectedIndex = util.getItemPos(availableProductTypes, item.product);
					tiChildPrice.text = item.price;
				}
			}				
			function childSave(){
				childSvc.cancel();
				childSvc.send(childModel);
			}
			
			function getContragentName(item:Object, column:DataGridColumn):String{				
				var tmp = util.getItemById(contragents, item.owner);
				if (tmp == null) {
					return "";
				} else {
					return tmp.name;
				}					
			}
		
			function getProductTypeName(item:Object, column:DataGridColumn):String{				
				var tmp = util.getItemById(productTypes, item.product);
				if (tmp == null) {
					return "";
				} else {
					return tmp.name;
				}					
			}
			
			public function init():void{
				createNew();				
				mainSvc.cancel();
				formModel.mode="FETCH";
				mainSvc.send(formModel);				
			}

			private function httpResultHandler(event:*):void{
				units = util.extractItemCollection(event.result.units, 'unit');
				contragents = util.extractItemCollection(event.result.contragents, 'contragent');
				addresses = util.extractItemCollection(event.result.addresses, 'address');
				productTypes = util.extractItemCollection(event.result.productTypes, 'producttype');
				priceListItems = util.extractItemCollection(event.result.priceListItems, 'pricelistitem');
				            
				availableUnits = util.getActiveItems(units);
				availableContragents = util.getActiveItems(contragents);			            
				availableProductTypes = util.getActiveItems(productTypes);
				
				            
				mainData = event.result.mainData;
				if (mainData != null) {
					mainData["pricelist"].filterFunction = mainFilterFunction;
				}
			} 
			private function httpChildResultHandler(event:*):void{
				priceListItems = util.extractItemCollection(event.result.mainData, 'pricelistitem');
				bindSelected(true);
			} 
			private function mainFilterFunction(item:*){
				var result:Boolean=true;
				if (!cbShowNonActive.selected && item.active<=0)
					return false;
				if (!cbShowActive.selected && item.active>0)
					return false;					
				if (mx.utils.StringUtil.trim(edFilter.text).length>0) {
					if (!new RegExp(edFilter.text).test(item.name))
						return false;
				}
				return result;
			} 
			private var previousSelected:int=-104;
			
			function bindSelected(refreshAnyWay:Boolean):void{				
				if ((refreshAnyWay) || (dgData.selectedIndex >= 0) && (previousSelected != dgData.selectedIndex)) {
					previousSelected = dgData.selectedIndex;
					cbActive.selected = (dgData.selectedItem.active == 1);
					if (dgData.selectedItem.date != null) {
						dfDate.text=dgData.selectedItem.date;
					} else {
						dfDate.text="";
					}															
					tiComment.text=dgData.selectedItem.comment;
					selectedPriceListItems.removeAll();
					formModel.id = dgData.selectedItem.id;
					childModel.parent = formModel.id;				
					for each (var priceListItem in priceListItems){
						if (priceListItem.parent == dgData.selectedItem.id){
							selectedPriceListItems.addItem(priceListItem);
						}
					}
					selectedPriceListItems.refresh();
				}													
			}
			function createNew():void{
				formModel.id="";
				cbActive.selected=true;
				formModel.mode="NEW";			
				tiComment.text="";
				cbOwner.selectedIndex = -1;
			}
			function childCreateNew():void{
				childModel.id="";
				cbChildActive.selected = true;
				cbChildProductType.selectedIndex = -1;
				tiChildPrice.text = "";
			}
			function cancel():void{
				bindSelected(false);
			}
			function saveSelected():void{
				formModel.mode="EDIT";
				mainSvc.cancel();	
				mainSvc.send(formModel);
			}
			function filterRefresh():void{
				mainData["pricelist"].refresh();
			}

		]]>
	</mx:Script>				
		<mx:Label text="Панель управления устройствами" fontFamily="Verdana" fontWeight="bold" fontSize="14"/>
		<mx:HBox width="877" height="274">
			<mx:VBox height="267" width="416" horizontalAlign="center" >
				<mx:DataGrid height="99" width="408" 
					id="dgData" 
					dataProvider="{mainData['pricelist']}"
					itemClick="bindSelected(false)">
					<mx:columns>
						<mx:DataGridColumn headerText="ID" dataField="id" width="50"/>
						<mx:DataGridColumn headerText="Контрагент" labelFunction="getContragentName" width="150"/>
						<mx:DataGridColumn headerText="Дата" dataField="date" width="50"/>
						<mx:DataGridColumn headerText="Комментарий" dataField="comment"/>
						<mx:DataGridColumn headerText="Активн." labelFunction="util.activeToString" width="50"/>						
					</mx:columns>
				</mx:DataGrid>
				<mx:HBox width="381" height="117">
				<mx:VBox horizontalAlign="left" height="108" width="170">
					<mx:FormItem label="Контрагент:" 
						required="true">												
						<mx:ComboBox id="cbOwner"
							dataProvider="{availableContragents}"
							labelField="name" width="80"/>
					</mx:FormItem>	
					<mx:FormItem label="Активно:"
						required="true">
						<mx:CheckBox id="cbActive"/>
					</mx:FormItem>
					<mx:FormItem label="Дата:" 
						required="true">												
						<mx:DateField id="dfDate"
							text=""
							formatString="DD/MM/YY"/>
					</mx:FormItem>
					</mx:VBox>
					<mx:FormItem label="Комментарий:">												
						<mx:TextInput id="tiComment" width="94" height="25"/>
					</mx:FormItem>
					</mx:HBox>
				
				<mx:HBox horizontalAlign="center" height="30">
					<mx:Button label="Сохранить" click="saveSelected()"/>							
					<mx:Button label="Отмена" click="cancel()"/>
					<mx:Button label="Создать" click="createNew()"/>
				</mx:HBox>
			</mx:VBox>			
			<mx:VBox height="206" horizontalAlign="center" verticalAlign="center" width="367">				

				
				<mx:VBox id="filterPanel">
					<mx:Script>
						<![CDATA[
							[Bindable]
							public var filterPanelMinimized:Boolean=true;							
						]]>
					</mx:Script>
					<mx:HBox horizontalAlign="right" width="100%">
						<mx:FormItem label="Фильтр:">
							<mx:Button id="filterButton" label="{filterPanelMinimized ? &quot;-&quot; : &quot;+&quot;}" click="filterPanelMinimized = !filterPanelMinimized"/>
							
							<mx:VBox id="filterDetails" visible="{filterPanelMinimized ? false : true}">
							<mx:FormItem label="Показывать:" horizontalAlign="left" width="100%" cornerRadius="0" borderStyle="none" borderThickness="0">
								<mx:CheckBox id="cbShowActive" click="filterRefresh()" selected="true" label="Активные"/>
								<mx:CheckBox id="cbShowNonActive" click="filterRefresh()" selected="true" label="Неактивные"/>
							</mx:FormItem>	
							<mx:FormItem label="Шаблон имени:" >
					<mx:TextInput id="edFilter" text=".*" change="filterRefresh()"/>									
				</mx:FormItem>
															</mx:VBox>
																

						</mx:FormItem>												
					</mx:HBox>					
				</mx:VBox>
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
	<mx:HBox width="882" height="205">		
		<mx:VBox height="100%" width="571" horizontalAlign="center" >
				<mx:DataGrid height="129" width="564" 
					id="dgChildData" 
					dataProvider="{selectedPriceListItems}"
					itemClick="childBindSelected()">
					<mx:columns>
						<mx:DataGridColumn headerText="ID" dataField="id" width="30"/>
						<mx:DataGridColumn headerText="Продукт" labelFunction="getProductTypeName" width="150"/>
						<mx:DataGridColumn headerText="Активность" labelFunction="util.activeToString" width="40"/>
						<mx:DataGridColumn headerText="Цена" dataField="price" width="50"/>
					</mx:columns>
				</mx:DataGrid>				
		</mx:VBox>
		<mx:VBox height="166">
			<mx:FormItem label="Продукт:" width="218">
				<mx:ComboBox id="cbChildProductType"
					dataProvider="{availableProductTypes}"
					labelField="name" width="150"/>				
			</mx:FormItem>
			<mx:FormItem label="Цена:">
				<mx:TextInput id="tiChildPrice"/>				
			</mx:FormItem>
			<mx:FormItem label="Активность:">
				<mx:CheckBox id="cbChildActive"/>				
			</mx:FormItem>	
			<mx:HBox>
				<mx:Button label="Новый" click="childCreateNew()"/>
				<mx:Button label="Сохранить" click="childSave()"/>
				<mx:Button label="Отмена" click="childBindSelected()"/>				
			</mx:HBox>		
		</mx:VBox>	
					
	</mx:HBox>
</mx:VBox>