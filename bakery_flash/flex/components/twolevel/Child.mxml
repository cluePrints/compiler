<?xml version="1.0" encoding="utf-8"?>
<!--
	This component is dynamic way to create\update\delete form for some entity.
		- get xml from specified svc
		- select useful fields and map them as fields of particular type, or as domain objects
			- domain objects are fetched from specified svcs
			- converted to string at checkboxes 
			
	Lifecycle:
		0.	Declaration:
			- dataFieldsDescriptors represent each field as:
				* type			(posible choices are String, Entity, Boolean) 
				* dataField		(data field name)	
				* labelFunction	(to convert it to string at comboBox and table)
				* displayedName (to display as hints)
				
		1.	Init: 
				- create table & components, named as inner_Component%field_name%
				- preset domain objects for comboboxes
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="800" height="300"
	creationComplete="init()">
	<mx:DataGrid id="dgData" dataProvider=""/>
	<mx:VBox id="editorBox"
		verticalAlign="right">		
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.controls.ComboBox;
			import mx.controls.CheckBox;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.controls.Text;
			import mx.containers.FormItem;
			import mx.controls.dataGridClasses.DataGridColumn;
			/**
			 * Datasource for table must bind here
			 **/
			[Bindable]
			public var tableDataProvider:*;
			
			/**
			 *  Array to hold names of displayed fields, got from tableDataProvider
			 **/
			[Bindable]
			public var dataFieldsDescriptors:Array;	
			function init(){				
				var cols:Array = dgData.columns;
				var i:int;
				for (i=0; i<dataFieldsDescriptors.length; i++) {
					//create main datagrid from definitions									
					var dgc:DataGridColumn = new DataGridColumn(dataFieldsDescriptors[i]['displayedName']);
					dgc.dataField = dataFieldsDescriptors[i]['dataField'];
					
					var func = dataFieldsDescriptors[i]['labelFunction'];
					if ((func!=undefined) && (func != null))
						dgc.labelFunction = func;
					
					cols.push(dgc);
					
					//create components for editing
					var formItem:FormItem = new FormItem();
					formItem.label=dataFieldsDescriptors[i]['displayedName'];
					formItem.name="formItem_"+dataFieldsDescriptors[i]['dataField'];
					var child = null;
					
					var type:String = dataFieldsDescriptors[i]['dataType'];
					if (("String" == type)
						|| ("Float" == type)) {						
						child = new TextInput();
					}
					if ("Entity" == type) {
						child = new ComboBox();
						child.labelField = dataFieldsDescriptors[i]['labelField'];		
					}
					
					if ("Boolean" == type) {
						child = new CheckBox();
					}
					
					child.name="innerComponent_"+dataFieldsDescriptors[i]['dataField'];
					editorBox.addChild(formItem);	
					formItem.addChild(child);	
								
				}
				dgData.columns = cols;

				Alert.show( getComponent("name"));						
			}		
			
			/**
			 * Returns dynamically created components by their name
			 **/
			function getComponent(name:String){
				var i:int;
				var r:int=-1;
				for (i=0; i<dataFieldsDescriptors.length; i++) {
					if (dataFieldsDescriptors[i]['dataField'] == name) 
					r=i;
				}
				if (r==-1)
					return null;
					
				var item = editorBox.getChildByName("formItem_"+dataFieldsDescriptors[r]['dataField']);
				var comp = item.getChildByName("innerComponent_"+dataFieldsDescriptors[r]['dataField']);
				return comp;
			}
		]]>
	</mx:Script>
				
</mx:HBox>
