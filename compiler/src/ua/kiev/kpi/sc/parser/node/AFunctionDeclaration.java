/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.node;

import ua.kiev.kpi.sc.parser.analysis.*;

@SuppressWarnings("nls")
public final class AFunctionDeclaration extends PFunctionDeclaration
{
    private TPublic _public_;
    private PResultType _resultType_;
    private PFunctionName _functionName_;
    private TLPar _lPar_;
    private PFormalArgList _formalArgList_;
    private TRPar _rPar_;

    public AFunctionDeclaration()
    {
        // Constructor
    }

    public AFunctionDeclaration(
        @SuppressWarnings("hiding") TPublic _public_,
        @SuppressWarnings("hiding") PResultType _resultType_,
        @SuppressWarnings("hiding") PFunctionName _functionName_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PFormalArgList _formalArgList_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setPublic(_public_);

        setResultType(_resultType_);

        setFunctionName(_functionName_);

        setLPar(_lPar_);

        setFormalArgList(_formalArgList_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionDeclaration(
            cloneNode(this._public_),
            cloneNode(this._resultType_),
            cloneNode(this._functionName_),
            cloneNode(this._lPar_),
            cloneNode(this._formalArgList_),
            cloneNode(this._rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionDeclaration(this);
    }

    public TPublic getPublic()
    {
        return this._public_;
    }

    public void setPublic(TPublic node)
    {
        if(this._public_ != null)
        {
            this._public_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._public_ = node;
    }

    public PResultType getResultType()
    {
        return this._resultType_;
    }

    public void setResultType(PResultType node)
    {
        if(this._resultType_ != null)
        {
            this._resultType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._resultType_ = node;
    }

    public PFunctionName getFunctionName()
    {
        return this._functionName_;
    }

    public void setFunctionName(PFunctionName node)
    {
        if(this._functionName_ != null)
        {
            this._functionName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionName_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PFormalArgList getFormalArgList()
    {
        return this._formalArgList_;
    }

    public void setFormalArgList(PFormalArgList node)
    {
        if(this._formalArgList_ != null)
        {
            this._formalArgList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formalArgList_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._public_)
            + toString(this._resultType_)
            + toString(this._functionName_)
            + toString(this._lPar_)
            + toString(this._formalArgList_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._public_ == child)
        {
            this._public_ = null;
            return;
        }

        if(this._resultType_ == child)
        {
            this._resultType_ = null;
            return;
        }

        if(this._functionName_ == child)
        {
            this._functionName_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._formalArgList_ == child)
        {
            this._formalArgList_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._public_ == oldChild)
        {
            setPublic((TPublic) newChild);
            return;
        }

        if(this._resultType_ == oldChild)
        {
            setResultType((PResultType) newChild);
            return;
        }

        if(this._functionName_ == oldChild)
        {
            setFunctionName((PFunctionName) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._formalArgList_ == oldChild)
        {
            setFormalArgList((PFormalArgList) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
