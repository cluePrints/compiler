/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.node;

import ua.kiev.kpi.sc.parser.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleConditionalOperator extends PConditionalOperator
{
    private PSimpleIf _simpleIf_;

    public ASimpleConditionalOperator()
    {
        // Constructor
    }

    public ASimpleConditionalOperator(
        @SuppressWarnings("hiding") PSimpleIf _simpleIf_)
    {
        // Constructor
        setSimpleIf(_simpleIf_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleConditionalOperator(
            cloneNode(this._simpleIf_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleConditionalOperator(this);
    }

    public PSimpleIf getSimpleIf()
    {
        return this._simpleIf_;
    }

    public void setSimpleIf(PSimpleIf node)
    {
        if(this._simpleIf_ != null)
        {
            this._simpleIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleIf_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleIf_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleIf_ == child)
        {
            this._simpleIf_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleIf_ == oldChild)
        {
            setSimpleIf((PSimpleIf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
