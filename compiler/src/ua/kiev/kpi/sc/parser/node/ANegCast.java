/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.node;

import ua.kiev.kpi.sc.parser.analysis.*;

@SuppressWarnings("nls")
public final class ANegCast extends PCast
{
    private TLPar _lPar_;
    private PVariableType _variableType_;
    private TRPar _rPar_;
    private PCast _cast_;

    public ANegCast()
    {
        // Constructor
    }

    public ANegCast(
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PVariableType _variableType_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PCast _cast_)
    {
        // Constructor
        setLPar(_lPar_);

        setVariableType(_variableType_);

        setRPar(_rPar_);

        setCast(_cast_);

    }

    @Override
    public Object clone()
    {
        return new ANegCast(
            cloneNode(this._lPar_),
            cloneNode(this._variableType_),
            cloneNode(this._rPar_),
            cloneNode(this._cast_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANegCast(this);
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PVariableType getVariableType()
    {
        return this._variableType_;
    }

    public void setVariableType(PVariableType node)
    {
        if(this._variableType_ != null)
        {
            this._variableType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableType_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PCast getCast()
    {
        return this._cast_;
    }

    public void setCast(PCast node)
    {
        if(this._cast_ != null)
        {
            this._cast_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cast_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lPar_)
            + toString(this._variableType_)
            + toString(this._rPar_)
            + toString(this._cast_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._variableType_ == child)
        {
            this._variableType_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._cast_ == child)
        {
            this._cast_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._variableType_ == oldChild)
        {
            setVariableType((PVariableType) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._cast_ == oldChild)
        {
            setCast((PCast) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
