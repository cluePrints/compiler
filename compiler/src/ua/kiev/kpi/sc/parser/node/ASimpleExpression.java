/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.node;

import ua.kiev.kpi.sc.parser.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleExpression extends PExpression
{
    private POperandOr _operandOr_;

    public ASimpleExpression()
    {
        // Constructor
    }

    public ASimpleExpression(
        @SuppressWarnings("hiding") POperandOr _operandOr_)
    {
        // Constructor
        setOperandOr(_operandOr_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleExpression(
            cloneNode(this._operandOr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleExpression(this);
    }

    public POperandOr getOperandOr()
    {
        return this._operandOr_;
    }

    public void setOperandOr(POperandOr node)
    {
        if(this._operandOr_ != null)
        {
            this._operandOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._operandOr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._operandOr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._operandOr_ == child)
        {
            this._operandOr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._operandOr_ == oldChild)
        {
            setOperandOr((POperandOr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
