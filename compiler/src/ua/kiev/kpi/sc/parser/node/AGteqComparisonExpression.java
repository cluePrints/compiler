/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.node;

import ua.kiev.kpi.sc.parser.analysis.*;

@SuppressWarnings("nls")
public final class AGteqComparisonExpression extends PComparisonExpression
{
    private PSimpleExpression _simpleExpression_;
    private TGteq _gteq_;
    private PComparisonExpression _comparisonExpression_;

    public AGteqComparisonExpression()
    {
        // Constructor
    }

    public AGteqComparisonExpression(
        @SuppressWarnings("hiding") PSimpleExpression _simpleExpression_,
        @SuppressWarnings("hiding") TGteq _gteq_,
        @SuppressWarnings("hiding") PComparisonExpression _comparisonExpression_)
    {
        // Constructor
        setSimpleExpression(_simpleExpression_);

        setGteq(_gteq_);

        setComparisonExpression(_comparisonExpression_);

    }

    @Override
    public Object clone()
    {
        return new AGteqComparisonExpression(
            cloneNode(this._simpleExpression_),
            cloneNode(this._gteq_),
            cloneNode(this._comparisonExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGteqComparisonExpression(this);
    }

    public PSimpleExpression getSimpleExpression()
    {
        return this._simpleExpression_;
    }

    public void setSimpleExpression(PSimpleExpression node)
    {
        if(this._simpleExpression_ != null)
        {
            this._simpleExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleExpression_ = node;
    }

    public TGteq getGteq()
    {
        return this._gteq_;
    }

    public void setGteq(TGteq node)
    {
        if(this._gteq_ != null)
        {
            this._gteq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._gteq_ = node;
    }

    public PComparisonExpression getComparisonExpression()
    {
        return this._comparisonExpression_;
    }

    public void setComparisonExpression(PComparisonExpression node)
    {
        if(this._comparisonExpression_ != null)
        {
            this._comparisonExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparisonExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleExpression_)
            + toString(this._gteq_)
            + toString(this._comparisonExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleExpression_ == child)
        {
            this._simpleExpression_ = null;
            return;
        }

        if(this._gteq_ == child)
        {
            this._gteq_ = null;
            return;
        }

        if(this._comparisonExpression_ == child)
        {
            this._comparisonExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleExpression_ == oldChild)
        {
            setSimpleExpression((PSimpleExpression) newChild);
            return;
        }

        if(this._gteq_ == oldChild)
        {
            setGteq((TGteq) newChild);
            return;
        }

        if(this._comparisonExpression_ == oldChild)
        {
            setComparisonExpression((PComparisonExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
