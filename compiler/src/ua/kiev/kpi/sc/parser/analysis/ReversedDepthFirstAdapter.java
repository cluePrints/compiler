/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.analysis;

import java.util.*;
import ua.kiev.kpi.sc.parser.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPCompilationUnit().apply(this);
        outStart(node);
    }

    public void inASingleCompilationUnit(ASingleCompilationUnit node)
    {
        defaultIn(node);
    }

    public void outASingleCompilationUnit(ASingleCompilationUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleCompilationUnit(ASingleCompilationUnit node)
    {
        inASingleCompilationUnit(node);
        if(node.getPublicClass() != null)
        {
            node.getPublicClass().apply(this);
        }
        outASingleCompilationUnit(node);
    }

    public void inAMultiCompilationUnit(AMultiCompilationUnit node)
    {
        defaultIn(node);
    }

    public void outAMultiCompilationUnit(AMultiCompilationUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiCompilationUnit(AMultiCompilationUnit node)
    {
        inAMultiCompilationUnit(node);
        if(node.getClassSeq() != null)
        {
            node.getClassSeq().apply(this);
        }
        if(node.getPublicClass() != null)
        {
            node.getPublicClass().apply(this);
        }
        outAMultiCompilationUnit(node);
    }

    public void inASingleClassSeq(ASingleClassSeq node)
    {
        defaultIn(node);
    }

    public void outASingleClassSeq(ASingleClassSeq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleClassSeq(ASingleClassSeq node)
    {
        inASingleClassSeq(node);
        if(node.getNotPublicClass() != null)
        {
            node.getNotPublicClass().apply(this);
        }
        outASingleClassSeq(node);
    }

    public void inAMultiClassSeq(AMultiClassSeq node)
    {
        defaultIn(node);
    }

    public void outAMultiClassSeq(AMultiClassSeq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiClassSeq(AMultiClassSeq node)
    {
        inAMultiClassSeq(node);
        if(node.getClassSeq() != null)
        {
            node.getClassSeq().apply(this);
        }
        if(node.getNotPublicClass() != null)
        {
            node.getNotPublicClass().apply(this);
        }
        outAMultiClassSeq(node);
    }

    public void inAPublicClass(APublicClass node)
    {
        defaultIn(node);
    }

    public void outAPublicClass(APublicClass node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPublicClass(APublicClass node)
    {
        inAPublicClass(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getClassToken() != null)
        {
            node.getClassToken().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAPublicClass(node);
    }

    public void inANotPublicClass(ANotPublicClass node)
    {
        defaultIn(node);
    }

    public void outANotPublicClass(ANotPublicClass node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotPublicClass(ANotPublicClass node)
    {
        inANotPublicClass(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getClassBody() != null)
        {
            node.getClassBody().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getClassToken() != null)
        {
            node.getClassToken().apply(this);
        }
        outANotPublicClass(node);
    }

    public void inAClassBody(AClassBody node)
    {
        defaultIn(node);
    }

    public void outAClassBody(AClassBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassBody(AClassBody node)
    {
        inAClassBody(node);
        {
            List<PClassBodyElem> copy = new ArrayList<PClassBodyElem>(node.getClassBodyElem());
            Collections.reverse(copy);
            for(PClassBodyElem e : copy)
            {
                e.apply(this);
            }
        }
        outAClassBody(node);
    }

    public void inAFunctionClassBodyElem(AFunctionClassBodyElem node)
    {
        defaultIn(node);
    }

    public void outAFunctionClassBodyElem(AFunctionClassBodyElem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionClassBodyElem(AFunctionClassBodyElem node)
    {
        inAFunctionClassBodyElem(node);
        if(node.getFunctionDefinition() != null)
        {
            node.getFunctionDefinition().apply(this);
        }
        outAFunctionClassBodyElem(node);
    }

    public void inAVariableClassBodyElem(AVariableClassBodyElem node)
    {
        defaultIn(node);
    }

    public void outAVariableClassBodyElem(AVariableClassBodyElem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableClassBodyElem(AVariableClassBodyElem node)
    {
        inAVariableClassBodyElem(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getVariableDefinition() != null)
        {
            node.getVariableDefinition().apply(this);
        }
        outAVariableClassBodyElem(node);
    }

    public void inAConstantClassBodyElem(AConstantClassBodyElem node)
    {
        defaultIn(node);
    }

    public void outAConstantClassBodyElem(AConstantClassBodyElem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantClassBodyElem(AConstantClassBodyElem node)
    {
        inAConstantClassBodyElem(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getConstantDefinition() != null)
        {
            node.getConstantDefinition().apply(this);
        }
        outAConstantClassBodyElem(node);
    }

    public void inAFunctionDefinition(AFunctionDefinition node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefinition(AFunctionDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDefinition(AFunctionDefinition node)
    {
        inAFunctionDefinition(node);
        if(node.getFunctionBody() != null)
        {
            node.getFunctionBody().apply(this);
        }
        if(node.getFunctionDeclaration() != null)
        {
            node.getFunctionDeclaration().apply(this);
        }
        outAFunctionDefinition(node);
    }

    public void inAVariableDefinition(AVariableDefinition node)
    {
        defaultIn(node);
    }

    public void outAVariableDefinition(AVariableDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDefinition(AVariableDefinition node)
    {
        inAVariableDefinition(node);
        if(node.getVariableName() != null)
        {
            node.getVariableName().apply(this);
        }
        if(node.getVariableType() != null)
        {
            node.getVariableType().apply(this);
        }
        outAVariableDefinition(node);
    }

    public void inAConstantDefinition(AConstantDefinition node)
    {
        defaultIn(node);
    }

    public void outAConstantDefinition(AConstantDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantDefinition(AConstantDefinition node)
    {
        inAConstantDefinition(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getVariableName() != null)
        {
            node.getVariableName().apply(this);
        }
        if(node.getVariableType() != null)
        {
            node.getVariableType().apply(this);
        }
        if(node.getFinal() != null)
        {
            node.getFinal().apply(this);
        }
        outAConstantDefinition(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getLiteralString() != null)
        {
            node.getLiteralString().apply(this);
        }
        outAStringLiteral(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getLiteralBoolean() != null)
        {
            node.getLiteralBoolean().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inANumericLiteral(ANumericLiteral node)
    {
        defaultIn(node);
    }

    public void outANumericLiteral(ANumericLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericLiteral(ANumericLiteral node)
    {
        inANumericLiteral(node);
        if(node.getLiteralNumeric() != null)
        {
            node.getLiteralNumeric().apply(this);
        }
        outANumericLiteral(node);
    }

    public void inANullLiteral(ANullLiteral node)
    {
        defaultIn(node);
    }

    public void outANullLiteral(ANullLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullLiteral(ANullLiteral node)
    {
        inANullLiteral(node);
        if(node.getLiteralNull() != null)
        {
            node.getLiteralNull().apply(this);
        }
        outANullLiteral(node);
    }

    public void inALiteralString(ALiteralString node)
    {
        defaultIn(node);
    }

    public void outALiteralString(ALiteralString node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralString(ALiteralString node)
    {
        inALiteralString(node);
        if(node.getDoubleQuoteClosing() != null)
        {
            node.getDoubleQuoteClosing().apply(this);
        }
        {
            List<TChar> copy = new ArrayList<TChar>(node.getChar());
            Collections.reverse(copy);
            for(TChar e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDoubleQuote() != null)
        {
            node.getDoubleQuote().apply(this);
        }
        outALiteralString(node);
    }

    public void inADoubleQuoteClosing(ADoubleQuoteClosing node)
    {
        defaultIn(node);
    }

    public void outADoubleQuoteClosing(ADoubleQuoteClosing node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleQuoteClosing(ADoubleQuoteClosing node)
    {
        inADoubleQuoteClosing(node);
        if(node.getDoubleQuote() != null)
        {
            node.getDoubleQuote().apply(this);
        }
        outADoubleQuoteClosing(node);
    }

    public void inAIntLiteralNumeric(AIntLiteralNumeric node)
    {
        defaultIn(node);
    }

    public void outAIntLiteralNumeric(AIntLiteralNumeric node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntLiteralNumeric(AIntLiteralNumeric node)
    {
        inAIntLiteralNumeric(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntLiteralNumeric(node);
    }

    public void inAFracLiteralNumeric(AFracLiteralNumeric node)
    {
        defaultIn(node);
    }

    public void outAFracLiteralNumeric(AFracLiteralNumeric node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFracLiteralNumeric(AFracLiteralNumeric node)
    {
        inAFracLiteralNumeric(node);
        if(node.getNonNegativeInteger() != null)
        {
            node.getNonNegativeInteger().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAFracLiteralNumeric(node);
    }

    public void inARealLiteralNumeric(ARealLiteralNumeric node)
    {
        defaultIn(node);
    }

    public void outARealLiteralNumeric(ARealLiteralNumeric node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealLiteralNumeric(ARealLiteralNumeric node)
    {
        inARealLiteralNumeric(node);
        if(node.getNonNegativeInteger() != null)
        {
            node.getNonNegativeInteger().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outARealLiteralNumeric(node);
    }

    public void inASimpleInteger(ASimpleInteger node)
    {
        defaultIn(node);
    }

    public void outASimpleInteger(ASimpleInteger node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleInteger(ASimpleInteger node)
    {
        inASimpleInteger(node);
        if(node.getNonNegativeInteger() != null)
        {
            node.getNonNegativeInteger().apply(this);
        }
        outASimpleInteger(node);
    }

    public void inAPositiveSignedInteger(APositiveSignedInteger node)
    {
        defaultIn(node);
    }

    public void outAPositiveSignedInteger(APositiveSignedInteger node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPositiveSignedInteger(APositiveSignedInteger node)
    {
        inAPositiveSignedInteger(node);
        if(node.getNonNegativeInteger() != null)
        {
            node.getNonNegativeInteger().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPositiveSignedInteger(node);
    }

    public void inANegativeInteger(ANegativeInteger node)
    {
        defaultIn(node);
    }

    public void outANegativeInteger(ANegativeInteger node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativeInteger(ANegativeInteger node)
    {
        inANegativeInteger(node);
        if(node.getNonNegativeInteger() != null)
        {
            node.getNonNegativeInteger().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outANegativeInteger(node);
    }

    public void inAVariableName(AVariableName node)
    {
        defaultIn(node);
    }

    public void outAVariableName(AVariableName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableName(AVariableName node)
    {
        inAVariableName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVariableName(node);
    }

    public void inAFunctionName(AFunctionName node)
    {
        defaultIn(node);
    }

    public void outAFunctionName(AFunctionName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionName(AFunctionName node)
    {
        inAFunctionName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFunctionName(node);
    }

    public void inAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        inAFunctionDeclaration(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalArgList() != null)
        {
            node.getFormalArgList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFunctionName() != null)
        {
            node.getFunctionName().apply(this);
        }
        if(node.getResultType() != null)
        {
            node.getResultType().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAFunctionDeclaration(node);
    }

    public void inAVoidResultType(AVoidResultType node)
    {
        defaultIn(node);
    }

    public void outAVoidResultType(AVoidResultType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidResultType(AVoidResultType node)
    {
        inAVoidResultType(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidResultType(node);
    }

    public void inAVariableResultType(AVariableResultType node)
    {
        defaultIn(node);
    }

    public void outAVariableResultType(AVariableResultType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableResultType(AVariableResultType node)
    {
        inAVariableResultType(node);
        if(node.getVariableType() != null)
        {
            node.getVariableType().apply(this);
        }
        outAVariableResultType(node);
    }

    public void inAScalarVariableType(AScalarVariableType node)
    {
        defaultIn(node);
    }

    public void outAScalarVariableType(AScalarVariableType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScalarVariableType(AScalarVariableType node)
    {
        inAScalarVariableType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAScalarVariableType(node);
    }

    public void inAArrayVariableType(AArrayVariableType node)
    {
        defaultIn(node);
    }

    public void outAArrayVariableType(AArrayVariableType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayVariableType(AArrayVariableType node)
    {
        inAArrayVariableType(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAArrayVariableType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getStringToken() != null)
        {
            node.getStringToken().apply(this);
        }
        outAStringType(node);
    }

    public void inATypeType(ATypeType node)
    {
        defaultIn(node);
    }

    public void outATypeType(ATypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeType(ATypeType node)
    {
        inATypeType(node);
        if(node.getTypeName() != null)
        {
            node.getTypeName().apply(this);
        }
        outATypeType(node);
    }

    public void inATypeName(ATypeName node)
    {
        defaultIn(node);
    }

    public void outATypeName(ATypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeName(ATypeName node)
    {
        inATypeName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeName(node);
    }

    public void inANothingFormalArgList(ANothingFormalArgList node)
    {
        defaultIn(node);
    }

    public void outANothingFormalArgList(ANothingFormalArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANothingFormalArgList(ANothingFormalArgList node)
    {
        inANothingFormalArgList(node);
        outANothingFormalArgList(node);
    }

    public void inASingleVarFormalArgList(ASingleVarFormalArgList node)
    {
        defaultIn(node);
    }

    public void outASingleVarFormalArgList(ASingleVarFormalArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleVarFormalArgList(ASingleVarFormalArgList node)
    {
        inASingleVarFormalArgList(node);
        if(node.getFormalArgList() != null)
        {
            node.getFormalArgList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVariableDefinition() != null)
        {
            node.getVariableDefinition().apply(this);
        }
        outASingleVarFormalArgList(node);
    }

    public void inAMultipleNVarFormalArgList(AMultipleNVarFormalArgList node)
    {
        defaultIn(node);
    }

    public void outAMultipleNVarFormalArgList(AMultipleNVarFormalArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleNVarFormalArgList(AMultipleNVarFormalArgList node)
    {
        inAMultipleNVarFormalArgList(node);
        if(node.getVariableDefinition() != null)
        {
            node.getVariableDefinition().apply(this);
        }
        outAMultipleNVarFormalArgList(node);
    }

    public void inAMethodName(AMethodName node)
    {
        defaultIn(node);
    }

    public void outAMethodName(AMethodName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodName(AMethodName node)
    {
        inAMethodName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMethodName(node);
    }

    public void inAConstantName(AConstantName node)
    {
        defaultIn(node);
    }

    public void outAConstantName(AConstantName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantName(AConstantName node)
    {
        inAConstantName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAConstantName(node);
    }

    public void inANormalFunctionBody(ANormalFunctionBody node)
    {
        defaultIn(node);
    }

    public void outANormalFunctionBody(ANormalFunctionBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalFunctionBody(ANormalFunctionBody node)
    {
        inANormalFunctionBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outANormalFunctionBody(node);
    }

    public void inAVoidFunctionBody(AVoidFunctionBody node)
    {
        defaultIn(node);
    }

    public void outAVoidFunctionBody(AVoidFunctionBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidFunctionBody(AVoidFunctionBody node)
    {
        inAVoidFunctionBody(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        outAVoidFunctionBody(node);
    }

    public void inASingleBlock(ASingleBlock node)
    {
        defaultIn(node);
    }

    public void outASingleBlock(ASingleBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleBlock(ASingleBlock node)
    {
        inASingleBlock(node);
        {
            List<POperator> copy = new ArrayList<POperator>(node.getOperator());
            Collections.reverse(copy);
            for(POperator e : copy)
            {
                e.apply(this);
            }
        }
        outASingleBlock(node);
    }

    public void inASimpleOperator(ASimpleOperator node)
    {
        defaultIn(node);
    }

    public void outASimpleOperator(ASimpleOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleOperator(ASimpleOperator node)
    {
        inASimpleOperator(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASimpleOperator(node);
    }

    public void inAAssignOperator(AAssignOperator node)
    {
        defaultIn(node);
    }

    public void outAAssignOperator(AAssignOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignOperator(AAssignOperator node)
    {
        inAAssignOperator(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getVariableName() != null)
        {
            node.getVariableName().apply(this);
        }
        outAAssignOperator(node);
    }

    public void inACondOperator(ACondOperator node)
    {
        defaultIn(node);
    }

    public void outACondOperator(ACondOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondOperator(ACondOperator node)
    {
        inACondOperator(node);
        if(node.getConditionalOperator() != null)
        {
            node.getConditionalOperator().apply(this);
        }
        outACondOperator(node);
    }

    public void inACycleOperator(ACycleOperator node)
    {
        defaultIn(node);
    }

    public void outACycleOperator(ACycleOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACycleOperator(ACycleOperator node)
    {
        inACycleOperator(node);
        if(node.getCycleOperator() != null)
        {
            node.getCycleOperator().apply(this);
        }
        outACycleOperator(node);
    }

    public void inASimpleIf(ASimpleIf node)
    {
        defaultIn(node);
    }

    public void outASimpleIf(ASimpleIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleIf(ASimpleIf node)
    {
        inASimpleIf(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outASimpleIf(node);
    }

    public void inASimpleConditionalOperator(ASimpleConditionalOperator node)
    {
        defaultIn(node);
    }

    public void outASimpleConditionalOperator(ASimpleConditionalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleConditionalOperator(ASimpleConditionalOperator node)
    {
        inASimpleConditionalOperator(node);
        if(node.getSimpleIf() != null)
        {
            node.getSimpleIf().apply(this);
        }
        outASimpleConditionalOperator(node);
    }

    public void inAElseConditionalOperator(AElseConditionalOperator node)
    {
        defaultIn(node);
    }

    public void outAElseConditionalOperator(AElseConditionalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseConditionalOperator(AElseConditionalOperator node)
    {
        inAElseConditionalOperator(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getSimpleIf() != null)
        {
            node.getSimpleIf().apply(this);
        }
        outAElseConditionalOperator(node);
    }

    public void inACycleCycleOperator(ACycleCycleOperator node)
    {
        defaultIn(node);
    }

    public void outACycleCycleOperator(ACycleCycleOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACycleCycleOperator(ACycleCycleOperator node)
    {
        inACycleCycleOperator(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outACycleCycleOperator(node);
    }

    public void inASimpleExpression(ASimpleExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleExpression(ASimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExpression(ASimpleExpression node)
    {
        inASimpleExpression(node);
        if(node.getOperandOr() != null)
        {
            node.getOperandOr().apply(this);
        }
        outASimpleExpression(node);
    }

    public void inAOrExprExpression(AOrExprExpression node)
    {
        defaultIn(node);
    }

    public void outAOrExprExpression(AOrExprExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExprExpression(AOrExprExpression node)
    {
        inAOrExprExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        if(node.getOperandOr() != null)
        {
            node.getOperandOr().apply(this);
        }
        outAOrExprExpression(node);
    }

    public void inASimpleOperandOr(ASimpleOperandOr node)
    {
        defaultIn(node);
    }

    public void outASimpleOperandOr(ASimpleOperandOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleOperandOr(ASimpleOperandOr node)
    {
        inASimpleOperandOr(node);
        if(node.getOperandAnd() != null)
        {
            node.getOperandAnd().apply(this);
        }
        outASimpleOperandOr(node);
    }

    public void inAAndOperandOr(AAndOperandOr node)
    {
        defaultIn(node);
    }

    public void outAAndOperandOr(AAndOperandOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndOperandOr(AAndOperandOr node)
    {
        inAAndOperandOr(node);
        if(node.getOperandOr() != null)
        {
            node.getOperandOr().apply(this);
        }
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        if(node.getOperandAnd() != null)
        {
            node.getOperandAnd().apply(this);
        }
        outAAndOperandOr(node);
    }

    public void inASimpleOperandAnd(ASimpleOperandAnd node)
    {
        defaultIn(node);
    }

    public void outASimpleOperandAnd(ASimpleOperandAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleOperandAnd(ASimpleOperandAnd node)
    {
        inASimpleOperandAnd(node);
        if(node.getComparisonExpression() != null)
        {
            node.getComparisonExpression().apply(this);
        }
        outASimpleOperandAnd(node);
    }

    public void inAEqOperandAnd(AEqOperandAnd node)
    {
        defaultIn(node);
    }

    public void outAEqOperandAnd(AEqOperandAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqOperandAnd(AEqOperandAnd node)
    {
        inAEqOperandAnd(node);
        if(node.getOperandAnd() != null)
        {
            node.getOperandAnd().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getComparisonExpression() != null)
        {
            node.getComparisonExpression().apply(this);
        }
        outAEqOperandAnd(node);
    }

    public void inANeqOperandAnd(ANeqOperandAnd node)
    {
        defaultIn(node);
    }

    public void outANeqOperandAnd(ANeqOperandAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqOperandAnd(ANeqOperandAnd node)
    {
        inANeqOperandAnd(node);
        if(node.getOperandAnd() != null)
        {
            node.getOperandAnd().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getComparisonExpression() != null)
        {
            node.getComparisonExpression().apply(this);
        }
        outANeqOperandAnd(node);
    }

    public void inASimpleComparisonExpression(ASimpleComparisonExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleComparisonExpression(ASimpleComparisonExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleComparisonExpression(ASimpleComparisonExpression node)
    {
        inASimpleComparisonExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outASimpleComparisonExpression(node);
    }

    public void inAGtComparisonExpression(AGtComparisonExpression node)
    {
        defaultIn(node);
    }

    public void outAGtComparisonExpression(AGtComparisonExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtComparisonExpression(AGtComparisonExpression node)
    {
        inAGtComparisonExpression(node);
        if(node.getComparisonExpression() != null)
        {
            node.getComparisonExpression().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outAGtComparisonExpression(node);
    }

    public void inALtComparisonExpression(ALtComparisonExpression node)
    {
        defaultIn(node);
    }

    public void outALtComparisonExpression(ALtComparisonExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtComparisonExpression(ALtComparisonExpression node)
    {
        inALtComparisonExpression(node);
        if(node.getComparisonExpression() != null)
        {
            node.getComparisonExpression().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outALtComparisonExpression(node);
    }

    public void inALteqComparisonExpression(ALteqComparisonExpression node)
    {
        defaultIn(node);
    }

    public void outALteqComparisonExpression(ALteqComparisonExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqComparisonExpression(ALteqComparisonExpression node)
    {
        inALteqComparisonExpression(node);
        if(node.getComparisonExpression() != null)
        {
            node.getComparisonExpression().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outALteqComparisonExpression(node);
    }

    public void inAGteqComparisonExpression(AGteqComparisonExpression node)
    {
        defaultIn(node);
    }

    public void outAGteqComparisonExpression(AGteqComparisonExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqComparisonExpression(AGteqComparisonExpression node)
    {
        inAGteqComparisonExpression(node);
        if(node.getComparisonExpression() != null)
        {
            node.getComparisonExpression().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outAGteqComparisonExpression(node);
    }

    public void inASimpleSimpleExpression(ASimpleSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleSimpleExpression(ASimpleSimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleSimpleExpression(ASimpleSimpleExpression node)
    {
        inASimpleSimpleExpression(node);
        if(node.getSummand() != null)
        {
            node.getSummand().apply(this);
        }
        outASimpleSimpleExpression(node);
    }

    public void inAAddSimpleExpression(AAddSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAAddSimpleExpression(AAddSimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddSimpleExpression(AAddSimpleExpression node)
    {
        inAAddSimpleExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getSummand() != null)
        {
            node.getSummand().apply(this);
        }
        outAAddSimpleExpression(node);
    }

    public void inASubSimpleExpression(ASubSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outASubSimpleExpression(ASubSimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubSimpleExpression(ASubSimpleExpression node)
    {
        inASubSimpleExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getSummand() != null)
        {
            node.getSummand().apply(this);
        }
        outASubSimpleExpression(node);
    }

    public void inASimpleSummand(ASimpleSummand node)
    {
        defaultIn(node);
    }

    public void outASimpleSummand(ASimpleSummand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleSummand(ASimpleSummand node)
    {
        inASimpleSummand(node);
        if(node.getMultiplier() != null)
        {
            node.getMultiplier().apply(this);
        }
        outASimpleSummand(node);
    }

    public void inAMulSummand(AMulSummand node)
    {
        defaultIn(node);
    }

    public void outAMulSummand(AMulSummand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulSummand(AMulSummand node)
    {
        inAMulSummand(node);
        if(node.getSummand() != null)
        {
            node.getSummand().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getMultiplier() != null)
        {
            node.getMultiplier().apply(this);
        }
        outAMulSummand(node);
    }

    public void inADivSummand(ADivSummand node)
    {
        defaultIn(node);
    }

    public void outADivSummand(ADivSummand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivSummand(ADivSummand node)
    {
        inADivSummand(node);
        if(node.getSummand() != null)
        {
            node.getSummand().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getMultiplier() != null)
        {
            node.getMultiplier().apply(this);
        }
        outADivSummand(node);
    }

    public void inARemSummand(ARemSummand node)
    {
        defaultIn(node);
    }

    public void outARemSummand(ARemSummand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemSummand(ARemSummand node)
    {
        inARemSummand(node);
        if(node.getSummand() != null)
        {
            node.getSummand().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        if(node.getMultiplier() != null)
        {
            node.getMultiplier().apply(this);
        }
        outARemSummand(node);
    }

    public void inASimpleMultiplier(ASimpleMultiplier node)
    {
        defaultIn(node);
    }

    public void outASimpleMultiplier(ASimpleMultiplier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleMultiplier(ASimpleMultiplier node)
    {
        inASimpleMultiplier(node);
        if(node.getCast() != null)
        {
            node.getCast().apply(this);
        }
        outASimpleMultiplier(node);
    }

    public void inANegMultiplier(ANegMultiplier node)
    {
        defaultIn(node);
    }

    public void outANegMultiplier(ANegMultiplier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegMultiplier(ANegMultiplier node)
    {
        inANegMultiplier(node);
        if(node.getMultiplier() != null)
        {
            node.getMultiplier().apply(this);
        }
        if(node.getEmark() != null)
        {
            node.getEmark().apply(this);
        }
        outANegMultiplier(node);
    }

    public void inASimpleCast(ASimpleCast node)
    {
        defaultIn(node);
    }

    public void outASimpleCast(ASimpleCast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleCast(ASimpleCast node)
    {
        inASimpleCast(node);
        if(node.getElementalExpression() != null)
        {
            node.getElementalExpression().apply(this);
        }
        outASimpleCast(node);
    }

    public void inANegCast(ANegCast node)
    {
        defaultIn(node);
    }

    public void outANegCast(ANegCast node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegCast(ANegCast node)
    {
        inANegCast(node);
        if(node.getCast() != null)
        {
            node.getCast().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getVariableType() != null)
        {
            node.getVariableType().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outANegCast(node);
    }

    public void inARecursiveElementalExpression(ARecursiveElementalExpression node)
    {
        defaultIn(node);
    }

    public void outARecursiveElementalExpression(ARecursiveElementalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecursiveElementalExpression(ARecursiveElementalExpression node)
    {
        inARecursiveElementalExpression(node);
        if(node.getElementalExpression() != null)
        {
            node.getElementalExpression().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outARecursiveElementalExpression(node);
    }

    public void inAArrElemElementalExpression(AArrElemElementalExpression node)
    {
        defaultIn(node);
    }

    public void outAArrElemElementalExpression(AArrElemElementalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrElemElementalExpression(AArrElemElementalExpression node)
    {
        inAArrElemElementalExpression(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArrElemElementalExpression(node);
    }

    public void inACallElementalExpression(ACallElementalExpression node)
    {
        defaultIn(node);
    }

    public void outACallElementalExpression(ACallElementalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallElementalExpression(ACallElementalExpression node)
    {
        inACallElementalExpression(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFactArgList() != null)
        {
            node.getFactArgList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outACallElementalExpression(node);
    }

    public void inALiteralElementalExpression(ALiteralElementalExpression node)
    {
        defaultIn(node);
    }

    public void outALiteralElementalExpression(ALiteralElementalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralElementalExpression(ALiteralElementalExpression node)
    {
        inALiteralElementalExpression(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralElementalExpression(node);
    }

    public void inAIdentifierElementalExpression(AIdentifierElementalExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierElementalExpression(AIdentifierElementalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierElementalExpression(AIdentifierElementalExpression node)
    {
        inAIdentifierElementalExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierElementalExpression(node);
    }

    public void inASingleFactArgList(ASingleFactArgList node)
    {
        defaultIn(node);
    }

    public void outASingleFactArgList(ASingleFactArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleFactArgList(ASingleFactArgList node)
    {
        inASingleFactArgList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASingleFactArgList(node);
    }

    public void inAMultipleFactArgList(AMultipleFactArgList node)
    {
        defaultIn(node);
    }

    public void outAMultipleFactArgList(AMultipleFactArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleFactArgList(AMultipleFactArgList node)
    {
        inAMultipleFactArgList(node);
        if(node.getFactArgList() != null)
        {
            node.getFactArgList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMultipleFactArgList(node);
    }
}
