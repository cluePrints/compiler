	compilation_unit =
		 public_class |
		 public_class class_seq;
	
	class_seq = 
		 not_public_class |
		 not_public_class class_seq;
			
	public_class = 
		public class_token identifier l_brc class_body r_brc;
		
	not_public_class =
		class_token identifier l_brc class_body r_brc;
		
	class_body = 
		class_body_elem*;
	
	class_body_elem = 
		 function_definition |
		 variable_definition semi | 
		 constant_definition semi;
	
	function_definition =
		function_declaration function_body;
	
	variable_definition =
		variable_type variable_name;
	
	constant_definition =
		final variable_type variable_name assign literal;
		
	literal =
		 literal_string |
		 literal_boolean |
		 literal_numeric |
		 literal_null;
	
	literal_string = double_quote char* double_quote_closing;
	
	double_quote_closing = double_quote;
	
	literal_numeric = 
		 integer |
		 dot non_negative_integer |
		 integer dot non_negative_integer;
	
	integer = 
		 non_negative_integer |
		 plus non_negative_integer |
		 minus non_negative_integer;
	
	variable_name = 
		identifier;
		
	function_name = 
		identifier;
	
	function_declaration = 
		public result_type function_name l_par formal_arg_list r_par;
		
	result_type =
		 void |
		 variable_type;
	
	variable_type =
		 type |
		 type l_bkt r_bkt;
	type = 
		 boolean |
		 int |
		 string_token |
		 type_name;
	
	type_name = 
		identifier;
		
	formal_arg_list =
		 variable_definition comma formal_arg_list |
		 variable_definition; 
	
	method_name = 
		identifier;
	
	constant_name = 
		identifier;		
	
	function_body = 
		 l_brc block return expression semi r_brc |
		 l_brc block return semi r_brc;
		
	block = 
		 operator*;
		
	operator = 
		 expression semi |
		 variable_name assign expression semi|
		 conditional_operator |
		 cycle_operator;

	simple_if = 
		if l_par expression r_par l_brc block r_brc;
		
	conditional_operator = 
		 simple_if |
		 simple_if else l_brc block r_brc;
		
	cycle_operator = 
		 while l_par expression r_par l_brc block r_brc;
	
	expression = 
		 operand_or | 
		 operand_or bar_bar expression;
	
	operand_or = 
		 operand_and |
		 operand_and amp_amp operand_or;
	
	operand_and = 
		 comparison_expression |
		 comparison_expression eq operand_and |
		 comparison_expression neq operand_and;
			
	comparison_expression = 
		 simple_expression |
		 simple_expression gt comparison_expression |
		 simple_expression lt comparison_expression |
		 simple_expression lteq comparison_expression |
		 simple_expression gteq comparison_expression;
	
	simple_expression = 
		 summand |
		 summand plus simple_expression |
		 summand minus simple_expression;
	
	summand = 
		 multiplier |
		 multiplier star summand |
		 multiplier slash summand |
		 multiplier percent summand;
		
	multiplier = 
		 cast |
		 emark multiplier;
		
	cast =
		 elemental_expression |
		 l_par variable_type r_par cast;
		
	elemental_expression =
		 identifier dot elemental_expression |
		 identifier l_bkt expression r_bkt |
		 identifier l_par fact_arg_list r_par | 
	     literal |
	     identifier;		
				
	fact_arg_list = 
		 expression |
		 expression comma fact_arg_list;