Package ua.kiev.kpi.sc.parser;


Helpers
  id_char = ['A'..'Z'] | ['a'..'z'];
  all = [0..0xffff];
  ws = [0x0000..0x0020];
  digit = ['0'..'9'];

Tokens


  // separators
  comma = ',';
  dot   = '.';
  l_bkt = '[';
  l_brc = '{';
  l_par = '(';
  r_bkt = ']';
  r_brc = '}';
  r_par = ')';
  semi  = ';';

  // operators

  amp_amp = '&&';
  assign = '=';
  bar_bar = '||';
  emark = '!';
  eq = '==';
  gt = '>';
  gteq = '>=';
  lt = '<';
  lteq = '<=';
  minus = '-';
  neq = '!=';
  percent = '%';
  plus = '+';
  slash = '/';
  star = '*';
  
  // keywords

  abstract = 'abstract';
  assert = 'assert';
  boolean = 'boolean';
  break = 'break';
  byte = 'byte';
  case = 'case';
  catch = 'catch';
  char = 'char';
  class_token = 'class';
  const = 'const';
  continue = 'continue';
  default = 'default';
  do = 'do';
  double = 'double';
  else = 'else';
  enum = 'enum';
  extends = 'extends';
  final = 'final';
  finally_token = 'finally';
  float = 'float';
  for = 'for';
  goto = 'goto';
  if = 'if';
  implements = 'implements';
  import = 'import';
  instanceof = 'instanceof';
  int = 'int';
  interface = 'interface';
  long = 'long';
  native = 'native';
  new = 'new';
  package = 'package';
  private = 'private';
  protected = 'protected';
  public = 'public';
  return = 'return';
  short = 'short';
  static = 'static';
  strictfp = 'strictfp';
  super_token = 'super';
  switch = 'switch';
  synchronized = 'synchronized';
  this = 'this';
  throw = 'throw';
  throws_token = 'throws';
  transient = 'transient';
  try = 'try';
  void = 'void';
  volatile = 'volatile';
  while = 'while';
  
  string_token = 'String';

  // literals

  boolean_literal = 'true' | 'false';
  floating_point_literal = ;
  integer_literal = digit+;
  null_literal = 'null';
  string_literal = ;


  // identifier
	whitespace = (ws)+;	
	identifier =
		id_char*;
Ignored Tokens
	whitespace;

Productions
	compilation_unit =
		{single} public_class |
		{multi} public_class class_seq;
	
	class_seq = 
		{single} not_public_class |
		{multi} not_public_class class_seq;
			
	public_class = 
		public class_token identifier l_brc class_body r_brc;
		
	not_public_class =
		class_token identifier l_brc class_body r_brc;
		
	class_body = 
		class_body_elem*;
	
	class_body_elem = 
		{function} function_definition |
		{variable} variable_definition semi | 
		{constant} constant_definition semi;
	
	function_definition =
		function_declaration function_body;
	
	variable_definition =
		variable_type variable_name;
	
	constant_definition =
		final variable_type variable_name assign literal;
	
	variable_name = 
		identifier;
		
	function_name = 
		identifier;
	
	function_declaration = 
		public result_type function_name l_par formal_arg_list r_par;
		
	result_type =
		{void} void |
		{variable} variable_type;
	
	variable_type = 
		{boolean} boolean |
		{int} int |
		{string} string_token |
		{type} type_name;
	
	type_name = 
		identifier;
		
	formal_arg_list = 
		{nothing} |
		{single_var} variable_definition |
		{single_const} constant_definition |
		{multiple_n_var} variable_definition comma formal_arg_list |
		{multiple_n_const} constant_definition comma formal_arg_list; 
	
	method_name = 
		identifier;
	
	constant_name = 
		identifier;		
	
	function_body = 
		{empty} l_brc r_brc |
		{empty_void_return} l_brc return semi r_brc |  
		{empty_nonvoid_return} l_brc return expression semi r_brc|
		{normal} l_brc block return expression semi r_brc |
		{void} l_brc block return semi r_brc;
		
	block = 
		{single} operator semi |
		{multiple} operator block semi;
		
	operator = 
		{simple} expression semi |
		{assign} variable_name assign expression |
		{cond} conditional_operator |
		{cycle} cycle_operator;
		
	conditional_operator = 
		{simple} if l_par expression r_par l_brc block r_brc;
		
	cycle_operator = 
		{cycle} while l_par expression r_par l_brc block r_brc;
	
	expression = 
		{simple} operand_or | 
		{or_expr} operand_or bar_bar expression;
	
	operand_or = 
		{simple} operand_and |
		{and} operand_and amp_amp operand_or;
	
	operand_and = 
		{simple} comparison_expression |
		{equality} comparison_expression equality_operation operand_and;
	
	comparison_expression = 
		{simple} simple_expression |
		{comparison} simple_expression comparison_operation comparison_expression;
	
	simple_expression = 
		{simple} summand |
		{sum} summand add_operation simple_expression;
	
	summand = 
		{simple} multiplier |
		{mul} multiplier mul_operation summand;
		
	multiplier = 
		{simple} cast |
		{neg} emark multiplier;
		
	cast =
		{simple} atomic_expression |
		{neg} l_par variable_type r_par cast;
		
	atomic_expression = 
		{var} variable_name |
		{const} constant_name |
		{literal} literal |
		{ref} reference;
		
	fact_arg_list = 
		{single} expression |
		{multiple} expression comma fact_arg_list;
		
	reference = 
	    {literal} literal |
		{var} variable_name |
		{arr_elem} variable_name l_bkt integer_literal r_bkt |
		{obj_method} variable_name dot function_name l_par fact_arg_list r_par;
		
	equality_operation =
		{eq} eq |
		{neq} neq;
		
	comparison_operation = 
		{greater} gt |
		{lesser} lt |
		{lesser_or_equal} lteq |
		{greater_or_equal} gteq;		
		
	add_operation = 
		{add} plus |
		{min} minus;
		
	mul_operation = 
		{mul} star |
		{div} slash |
		{remainder} percent;
		
	literal = 
	  	{bool} boolean_literal |
	  	{int} integer_literal |
	  	{null} null_literal;	