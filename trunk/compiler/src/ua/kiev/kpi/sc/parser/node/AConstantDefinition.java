/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.node;

import ua.kiev.kpi.sc.parser.analysis.*;

@SuppressWarnings("nls")
public final class AConstantDefinition extends PConstantDefinition
{
    private TFinal _final_;
    private PVariableType _variableType_;
    private PVariableName _variableName_;
    private TAssign _assign_;
    private PLiteral _literal_;

    public AConstantDefinition()
    {
        // Constructor
    }

    public AConstantDefinition(
        @SuppressWarnings("hiding") TFinal _final_,
        @SuppressWarnings("hiding") PVariableType _variableType_,
        @SuppressWarnings("hiding") PVariableName _variableName_,
        @SuppressWarnings("hiding") TAssign _assign_,
        @SuppressWarnings("hiding") PLiteral _literal_)
    {
        // Constructor
        setFinal(_final_);

        setVariableType(_variableType_);

        setVariableName(_variableName_);

        setAssign(_assign_);

        setLiteral(_literal_);

    }

    @Override
    public Object clone()
    {
        return new AConstantDefinition(
            cloneNode(this._final_),
            cloneNode(this._variableType_),
            cloneNode(this._variableName_),
            cloneNode(this._assign_),
            cloneNode(this._literal_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConstantDefinition(this);
    }

    public TFinal getFinal()
    {
        return this._final_;
    }

    public void setFinal(TFinal node)
    {
        if(this._final_ != null)
        {
            this._final_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._final_ = node;
    }

    public PVariableType getVariableType()
    {
        return this._variableType_;
    }

    public void setVariableType(PVariableType node)
    {
        if(this._variableType_ != null)
        {
            this._variableType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableType_ = node;
    }

    public PVariableName getVariableName()
    {
        return this._variableName_;
    }

    public void setVariableName(PVariableName node)
    {
        if(this._variableName_ != null)
        {
            this._variableName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableName_ = node;
    }

    public TAssign getAssign()
    {
        return this._assign_;
    }

    public void setAssign(TAssign node)
    {
        if(this._assign_ != null)
        {
            this._assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assign_ = node;
    }

    public PLiteral getLiteral()
    {
        return this._literal_;
    }

    public void setLiteral(PLiteral node)
    {
        if(this._literal_ != null)
        {
            this._literal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._literal_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._final_)
            + toString(this._variableType_)
            + toString(this._variableName_)
            + toString(this._assign_)
            + toString(this._literal_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._final_ == child)
        {
            this._final_ = null;
            return;
        }

        if(this._variableType_ == child)
        {
            this._variableType_ = null;
            return;
        }

        if(this._variableName_ == child)
        {
            this._variableName_ = null;
            return;
        }

        if(this._assign_ == child)
        {
            this._assign_ = null;
            return;
        }

        if(this._literal_ == child)
        {
            this._literal_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._final_ == oldChild)
        {
            setFinal((TFinal) newChild);
            return;
        }

        if(this._variableType_ == oldChild)
        {
            setVariableType((PVariableType) newChild);
            return;
        }

        if(this._variableName_ == oldChild)
        {
            setVariableName((PVariableName) newChild);
            return;
        }

        if(this._assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(this._literal_ == oldChild)
        {
            setLiteral((PLiteral) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
