/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.node;

import ua.kiev.kpi.sc.parser.analysis.*;

@SuppressWarnings("nls")
public final class ARecursiveElementalExpression extends PElementalExpression
{
    private TIdentifier _identifier_;
    private TDot _dot_;
    private PElementalExpression _elementalExpression_;

    public ARecursiveElementalExpression()
    {
        // Constructor
    }

    public ARecursiveElementalExpression(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") PElementalExpression _elementalExpression_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setDot(_dot_);

        setElementalExpression(_elementalExpression_);

    }

    @Override
    public Object clone()
    {
        return new ARecursiveElementalExpression(
            cloneNode(this._identifier_),
            cloneNode(this._dot_),
            cloneNode(this._elementalExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARecursiveElementalExpression(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    public PElementalExpression getElementalExpression()
    {
        return this._elementalExpression_;
    }

    public void setElementalExpression(PElementalExpression node)
    {
        if(this._elementalExpression_ != null)
        {
            this._elementalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elementalExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._dot_)
            + toString(this._elementalExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        if(this._elementalExpression_ == child)
        {
            this._elementalExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this._elementalExpression_ == oldChild)
        {
            setElementalExpression((PElementalExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
