/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.node;

import ua.kiev.kpi.sc.parser.analysis.*;

@SuppressWarnings("nls")
public final class ABooleanLiteral extends PLiteral
{
    private TLiteralBoolean _literalBoolean_;

    public ABooleanLiteral()
    {
        // Constructor
    }

    public ABooleanLiteral(
        @SuppressWarnings("hiding") TLiteralBoolean _literalBoolean_)
    {
        // Constructor
        setLiteralBoolean(_literalBoolean_);

    }

    @Override
    public Object clone()
    {
        return new ABooleanLiteral(
            cloneNode(this._literalBoolean_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABooleanLiteral(this);
    }

    public TLiteralBoolean getLiteralBoolean()
    {
        return this._literalBoolean_;
    }

    public void setLiteralBoolean(TLiteralBoolean node)
    {
        if(this._literalBoolean_ != null)
        {
            this._literalBoolean_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._literalBoolean_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._literalBoolean_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._literalBoolean_ == child)
        {
            this._literalBoolean_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._literalBoolean_ == oldChild)
        {
            setLiteralBoolean((TLiteralBoolean) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
