/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.node;

import ua.kiev.kpi.sc.parser.analysis.*;

@SuppressWarnings("nls")
public final class ASingleVarFormalArgList extends PFormalArgList
{
    private PVariableDefinition _variableDefinition_;
    private TComma _comma_;
    private PFormalArgList _formalArgList_;

    public ASingleVarFormalArgList()
    {
        // Constructor
    }

    public ASingleVarFormalArgList(
        @SuppressWarnings("hiding") PVariableDefinition _variableDefinition_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PFormalArgList _formalArgList_)
    {
        // Constructor
        setVariableDefinition(_variableDefinition_);

        setComma(_comma_);

        setFormalArgList(_formalArgList_);

    }

    @Override
    public Object clone()
    {
        return new ASingleVarFormalArgList(
            cloneNode(this._variableDefinition_),
            cloneNode(this._comma_),
            cloneNode(this._formalArgList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASingleVarFormalArgList(this);
    }

    public PVariableDefinition getVariableDefinition()
    {
        return this._variableDefinition_;
    }

    public void setVariableDefinition(PVariableDefinition node)
    {
        if(this._variableDefinition_ != null)
        {
            this._variableDefinition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableDefinition_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PFormalArgList getFormalArgList()
    {
        return this._formalArgList_;
    }

    public void setFormalArgList(PFormalArgList node)
    {
        if(this._formalArgList_ != null)
        {
            this._formalArgList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formalArgList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._variableDefinition_)
            + toString(this._comma_)
            + toString(this._formalArgList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._variableDefinition_ == child)
        {
            this._variableDefinition_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._formalArgList_ == child)
        {
            this._formalArgList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._variableDefinition_ == oldChild)
        {
            setVariableDefinition((PVariableDefinition) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._formalArgList_ == oldChild)
        {
            setFormalArgList((PFormalArgList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
