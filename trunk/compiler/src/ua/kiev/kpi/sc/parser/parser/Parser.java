/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.parser;

import ua.kiev.kpi.sc.parser.lexer.*;
import ua.kiev.kpi.sc.parser.node.*;
import ua.kiev.kpi.sc.parser.analysis.*;
import ua.kiev.kpi.sc.parser.ext.rules.ReduceRulesMapping;

import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;


@SuppressWarnings(value={"nls", "unchecked"})
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();
    ReduceRulesMapping rr = new ReduceRulesMapping();
    public static String readableRulesTriggered;
    public static List<Integer> triggeredRulesInd;
    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    public final static int SHIFT = 0;
    public final static int REDUCE = 1;
    public final static int ACCEPT = 2;
    public final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
    	
    	readableRulesTriggered += rr.getRepresentation(listNode);
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    
    public Start parse() throws ParserException, LexerException, IOException
    {
    	triggeredRulesInd = new LinkedList<Integer>();
    	readableRulesTriggered = "";
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                	triggeredRulesInd.add(this.action[1]);
                    switch(this.action[1])
                    {
                    case 0: /* reduce ASingleCompilationUnit */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AMultiCompilationUnit */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce ASingleClassSeq */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AMultiClassSeq */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce APublicClass */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce ANotPublicClass */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AAclassbody1ClassBody */
		    {
			ArrayList list = new6();
			push(goTo(4), list, false);
		    }
		    break;
                    case 7: /* reduce AAclassbody2ClassBody */
		    {
			ArrayList list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce AFunctionClassBodyElem */
		    {
			ArrayList list = new8();
			push(goTo(5), list, false);
		    }
		    break;
                    case 9: /* reduce AVariableClassBodyElem */
		    {
			ArrayList list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce AConstantClassBodyElem */
		    {
			ArrayList list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce AFunctionDefinition */
		    {
			ArrayList list = new11();
			push(goTo(6), list, false);
		    }
		    break;
                    case 12: /* reduce AVariableDefinition */
		    {
			ArrayList list = new12();
			push(goTo(7), list, false);
		    }
		    break;
                    case 13: /* reduce AConstantDefinition */
		    {
			ArrayList list = new13();
			push(goTo(8), list, false);
		    }
		    break;
                    case 14: /* reduce AStringLiteral */
		    {
			ArrayList list = new14();
			push(goTo(9), list, false);
		    }
		    break;
                    case 15: /* reduce ABooleanLiteral */
		    {
			ArrayList list = new15();
			push(goTo(9), list, false);
		    }
		    break;
                    case 16: /* reduce ANumericLiteral */
		    {
			ArrayList list = new16();
			push(goTo(9), list, false);
		    }
		    break;
                    case 17: /* reduce ANullLiteral */
		    {
			ArrayList list = new17();
			push(goTo(9), list, false);
		    }
		    break;
                    case 18: /* reduce AAliteralstring1LiteralString */
		    {
			ArrayList list = new18();
			push(goTo(10), list, false);
		    }
		    break;
                    case 19: /* reduce AAliteralstring2LiteralString */
		    {
			ArrayList list = new19();
			push(goTo(10), list, false);
		    }
		    break;
                    case 20: /* reduce ADoubleQuoteClosing */
		    {
			ArrayList list = new20();
			push(goTo(11), list, false);
		    }
		    break;
                    case 21: /* reduce AIntLiteralNumeric */
		    {
			ArrayList list = new21();
			push(goTo(12), list, false);
		    }
		    break;
                    case 22: /* reduce AFracLiteralNumeric */
		    {
			ArrayList list = new22();
			push(goTo(12), list, false);
		    }
		    break;
                    case 23: /* reduce ARealLiteralNumeric */
		    {
			ArrayList list = new23();
			push(goTo(12), list, false);
		    }
		    break;
                    case 24: /* reduce ASimpleInteger */
		    {
			ArrayList list = new24();
			push(goTo(13), list, false);
		    }
		    break;
                    case 25: /* reduce APositiveSignedInteger */
		    {
			ArrayList list = new25();
			push(goTo(13), list, false);
		    }
		    break;
                    case 26: /* reduce ANegativeInteger */
		    {
			ArrayList list = new26();
			push(goTo(13), list, false);
		    }
		    break;
                    case 27: /* reduce AVariableName */
		    {
			ArrayList list = new27();
			push(goTo(14), list, false);
		    }
		    break;
                    case 28: /* reduce AFunctionName */
		    {
			ArrayList list = new28();
			push(goTo(15), list, false);
		    }
		    break;
                    case 29: /* reduce AFunctionDeclaration */
		    {
			ArrayList list = new29();
			push(goTo(16), list, false);
		    }
		    break;
                    case 30: /* reduce AVoidResultType */
		    {
			ArrayList list = new30();
			push(goTo(17), list, false);
		    }
		    break;
                    case 31: /* reduce AVariableResultType */
		    {
			ArrayList list = new31();
			push(goTo(17), list, false);
		    }
		    break;
                    case 32: /* reduce AScalarVariableType */
		    {
			ArrayList list = new32();
			push(goTo(18), list, false);
		    }
		    break;
                    case 33: /* reduce AArrayVariableType */
		    {
			ArrayList list = new33();
			push(goTo(18), list, false);
		    }
		    break;
                    case 34: /* reduce ABooleanType */
		    {
			ArrayList list = new34();
			push(goTo(19), list, false);
		    }
		    break;
                    case 35: /* reduce AIntType */
		    {
			ArrayList list = new35();
			push(goTo(19), list, false);
		    }
		    break;
                    case 36: /* reduce AStringType */
		    {
			ArrayList list = new36();
			push(goTo(19), list, false);
		    }
		    break;
                    case 37: /* reduce ATypeType */
		    {
			ArrayList list = new37();
			push(goTo(19), list, false);
		    }
		    break;
                    case 38: /* reduce ATypeName */
		    {
			ArrayList list = new38();
			push(goTo(20), list, false);
		    }
		    break;
                    case 39: /* reduce ANothingFormalArgList */
		    {
			ArrayList list = new39();
			push(goTo(21), list, false);
		    }
		    break;
                    case 40: /* reduce ASingleVarFormalArgList */
		    {
			ArrayList list = new40();
			push(goTo(21), list, false);
		    }
		    break;
                    case 41: /* reduce AMultipleNVarFormalArgList */
		    {
			ArrayList list = new41();
			push(goTo(21), list, false);
		    }
		    break;
                    case 42: /* reduce AMethodName */
		    {
			ArrayList list = new42();
			push(goTo(22), list, false);
		    }
		    break;
                    case 43: /* reduce AConstantName */
		    {
			ArrayList list = new43();
			push(goTo(23), list, false);
		    }
		    break;
                    case 44: /* reduce ANormalFunctionBody */
		    {
			ArrayList list = new44();
			push(goTo(24), list, false);
		    }
		    break;
                    case 45: /* reduce AVoidFunctionBody */
		    {
			ArrayList list = new45();
			push(goTo(24), list, false);
		    }
		    break;
                    case 46: /* reduce AAsingleblock1Block */
		    {
			ArrayList list = new46();
			push(goTo(25), list, false);
		    }
		    break;
                    case 47: /* reduce AAsingleblock2Block */
		    {
			ArrayList list = new47();
			push(goTo(25), list, false);
		    }
		    break;
                    case 48: /* reduce ASimpleOperator */
		    {
			ArrayList list = new48();
			push(goTo(26), list, false);
		    }
		    break;
                    case 49: /* reduce AAssignOperator */
		    {
			ArrayList list = new49();
			push(goTo(26), list, false);
		    }
		    break;
                    case 50: /* reduce ACondOperator */
		    {
			ArrayList list = new50();
			push(goTo(26), list, false);
		    }
		    break;
                    case 51: /* reduce ACycleOperator */
		    {
			ArrayList list = new51();
			push(goTo(26), list, false);
		    }
		    break;
                    case 52: /* reduce ASimpleIf */
		    {
			ArrayList list = new52();
			push(goTo(27), list, false);
		    }
		    break;
                    case 53: /* reduce ASimpleConditionalOperator */
		    {
			ArrayList list = new53();
			push(goTo(28), list, false);
		    }
		    break;
                    case 54: /* reduce AElseConditionalOperator */
		    {
			ArrayList list = new54();
			push(goTo(28), list, false);
		    }
		    break;
                    case 55: /* reduce ACycleCycleOperator */
		    {
			ArrayList list = new55();
			push(goTo(29), list, false);
		    }
		    break;
                    case 56: /* reduce ASimpleExpression */
		    {
			ArrayList list = new56();
			push(goTo(30), list, false);
		    }
		    break;
                    case 57: /* reduce AOrExprExpression */
		    {
			ArrayList list = new57();
			push(goTo(30), list, false);
		    }
		    break;
                    case 58: /* reduce ASimpleOperandOr */
		    {
			ArrayList list = new58();
			push(goTo(31), list, false);
		    }
		    break;
                    case 59: /* reduce AAndOperandOr */
		    {
			ArrayList list = new59();
			push(goTo(31), list, false);
		    }
		    break;
                    case 60: /* reduce ASimpleOperandAnd */
		    {
			ArrayList list = new60();
			push(goTo(32), list, false);
		    }
		    break;
                    case 61: /* reduce AEqOperandAnd */
		    {
			ArrayList list = new61();
			push(goTo(32), list, false);
		    }
		    break;
                    case 62: /* reduce ANeqOperandAnd */
		    {
			ArrayList list = new62();
			push(goTo(32), list, false);
		    }
		    break;
                    case 63: /* reduce ASimpleComparisonExpression */
		    {
			ArrayList list = new63();
			push(goTo(33), list, false);
		    }
		    break;
                    case 64: /* reduce AGtComparisonExpression */
		    {
			ArrayList list = new64();
			push(goTo(33), list, false);
		    }
		    break;
                    case 65: /* reduce ALtComparisonExpression */
		    {
			ArrayList list = new65();
			push(goTo(33), list, false);
		    }
		    break;
                    case 66: /* reduce ALteqComparisonExpression */
		    {
			ArrayList list = new66();
			push(goTo(33), list, false);
		    }
		    break;
                    case 67: /* reduce AGteqComparisonExpression */
		    {
			ArrayList list = new67();
			push(goTo(33), list, false);
		    }
		    break;
                    case 68: /* reduce ASimpleSimpleExpression */
		    {
			ArrayList list = new68();
			push(goTo(34), list, false);
		    }
		    break;
                    case 69: /* reduce AAddSimpleExpression */
		    {
			ArrayList list = new69();
			push(goTo(34), list, false);
		    }
		    break;
                    case 70: /* reduce ASubSimpleExpression */
		    {
			ArrayList list = new70();
			push(goTo(34), list, false);
		    }
		    break;
                    case 71: /* reduce ASimpleSummand */
		    {
			ArrayList list = new71();
			push(goTo(35), list, false);
		    }
		    break;
                    case 72: /* reduce AMulSummand */
		    {
			ArrayList list = new72();
			push(goTo(35), list, false);
		    }
		    break;
                    case 73: /* reduce ADivSummand */
		    {
			ArrayList list = new73();
			push(goTo(35), list, false);
		    }
		    break;
                    case 74: /* reduce ARemSummand */
		    {
			ArrayList list = new74();
			push(goTo(35), list, false);
		    }
		    break;
                    case 75: /* reduce ASimpleMultiplier */
		    {
			ArrayList list = new75();
			push(goTo(36), list, false);
		    }
		    break;
                    case 76: /* reduce ANegMultiplier */
		    {
			ArrayList list = new76();
			push(goTo(36), list, false);
		    }
		    break;
                    case 77: /* reduce ASimpleCast */
		    {
			ArrayList list = new77();
			push(goTo(37), list, false);
		    }
		    break;
                    case 78: /* reduce ANegCast */
		    {
			ArrayList list = new78();
			push(goTo(37), list, false);
		    }
		    break;
                    case 79: /* reduce ARecursiveElementalExpression */
		    {
			ArrayList list = new79();
			push(goTo(38), list, false);
		    }
		    break;
                    case 80: /* reduce AArrElemElementalExpression */
		    {
			ArrayList list = new80();
			push(goTo(38), list, false);
		    }
		    break;
                    case 81: /* reduce ACallElementalExpression */
		    {
			ArrayList list = new81();
			push(goTo(38), list, false);
		    }
		    break;
                    case 82: /* reduce ALiteralElementalExpression */
		    {
			ArrayList list = new82();
			push(goTo(38), list, false);
		    }
		    break;
                    case 83: /* reduce AIdentifierElementalExpression */
		    {
			ArrayList list = new83();
			push(goTo(38), list, false);
		    }
		    break;
                    case 84: /* reduce ASingleFactArgList */
		    {
			ArrayList list = new84();
			push(goTo(39), list, false);
		    }
		    break;
                    case 85: /* reduce AMultipleFactArgList */
		    {
			ArrayList list = new85();
			push(goTo(39), list, false);
		    }
		    break;
                    case 86: /* reduce ATerminal$ClassBodyElem */
		    {
			ArrayList list = new86();
			push(goTo(40), list, true);
		    }
		    break;
                    case 87: /* reduce ANonTerminal$ClassBodyElem */
		    {
			ArrayList list = new87();
			push(goTo(40), list, true);
		    }
		    break;
                    case 88: /* reduce ATerminal$Char */
		    {
			ArrayList list = new88();
			push(goTo(41), list, true);
		    }
		    break;
                    case 89: /* reduce ANonTerminal$Char */
		    {
			ArrayList list = new89();
			push(goTo(41), list, true);
		    }
		    break;
                    case 90: /* reduce ATerminal$Operator */
		    {
			ArrayList list = new90();
			push(goTo(42), list, true);
		    }
		    break;
                    case 91: /* reduce ANonTerminal$Operator */
		    {
			ArrayList list = new91();
			push(goTo(42), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PCompilationUnit node1 = (PCompilationUnit) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    
    ArrayList new0() /* reduce ASingleCompilationUnit */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PCompilationUnit pcompilationunitNode1;
        {
            // Block
        PPublicClass ppublicclassNode2;
        ppublicclassNode2 = (PPublicClass)nodeArrayList1.get(0);

        pcompilationunitNode1 = new ASingleCompilationUnit(ppublicclassNode2);
        }
	nodeList.add(pcompilationunitNode1);
        return nodeList;
    }



    
    ArrayList new1() /* reduce AMultiCompilationUnit */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PCompilationUnit pcompilationunitNode1;
        {
            // Block
        PPublicClass ppublicclassNode2;
        PClassSeq pclassseqNode3;
        ppublicclassNode2 = (PPublicClass)nodeArrayList1.get(0);
        pclassseqNode3 = (PClassSeq)nodeArrayList2.get(0);

        pcompilationunitNode1 = new AMultiCompilationUnit(ppublicclassNode2, pclassseqNode3);
        }
	nodeList.add(pcompilationunitNode1);
        return nodeList;
    }



    
    ArrayList new2() /* reduce ASingleClassSeq */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PClassSeq pclassseqNode1;
        {
            // Block
        PNotPublicClass pnotpublicclassNode2;
        pnotpublicclassNode2 = (PNotPublicClass)nodeArrayList1.get(0);

        pclassseqNode1 = new ASingleClassSeq(pnotpublicclassNode2);
        }
	nodeList.add(pclassseqNode1);
        return nodeList;
    }



    
    ArrayList new3() /* reduce AMultiClassSeq */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PClassSeq pclassseqNode1;
        {
            // Block
        PNotPublicClass pnotpublicclassNode2;
        PClassSeq pclassseqNode3;
        pnotpublicclassNode2 = (PNotPublicClass)nodeArrayList1.get(0);
        pclassseqNode3 = (PClassSeq)nodeArrayList2.get(0);

        pclassseqNode1 = new AMultiClassSeq(pnotpublicclassNode2, pclassseqNode3);
        }
	nodeList.add(pclassseqNode1);
        return nodeList;
    }



    
    ArrayList new4() /* reduce APublicClass */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = pop();
        ArrayList nodeArrayList5 = pop();
        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PPublicClass ppublicclassNode1;
        {
            // Block
        TPublic tpublicNode2;
        TClassToken tclasstokenNode3;
        TIdentifier tidentifierNode4;
        TLBrc tlbrcNode5;
        PClassBody pclassbodyNode6;
        TRBrc trbrcNode7;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        tclasstokenNode3 = (TClassToken)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tlbrcNode5 = (TLBrc)nodeArrayList4.get(0);
        pclassbodyNode6 = (PClassBody)nodeArrayList5.get(0);
        trbrcNode7 = (TRBrc)nodeArrayList6.get(0);

        ppublicclassNode1 = new APublicClass(tpublicNode2, tclasstokenNode3, tidentifierNode4, tlbrcNode5, pclassbodyNode6, trbrcNode7);
        }
	nodeList.add(ppublicclassNode1);
        return nodeList;
    }



    
    ArrayList new5() /* reduce ANotPublicClass */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = pop();
        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PNotPublicClass pnotpublicclassNode1;
        {
            // Block
        TClassToken tclasstokenNode2;
        TIdentifier tidentifierNode3;
        TLBrc tlbrcNode4;
        PClassBody pclassbodyNode5;
        TRBrc trbrcNode6;
        tclasstokenNode2 = (TClassToken)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlbrcNode4 = (TLBrc)nodeArrayList3.get(0);
        pclassbodyNode5 = (PClassBody)nodeArrayList4.get(0);
        trbrcNode6 = (TRBrc)nodeArrayList5.get(0);

        pnotpublicclassNode1 = new ANotPublicClass(tclasstokenNode2, tidentifierNode3, tlbrcNode4, pclassbodyNode5, trbrcNode6);
        }
	nodeList.add(pnotpublicclassNode1);
        return nodeList;
    }



    
    ArrayList new6() /* reduce AAclassbody1ClassBody */
    {
        ArrayList nodeList = new ArrayList();

        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode2);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    
    ArrayList new7() /* reduce AAclassbody2ClassBody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode3);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    
    ArrayList new8() /* reduce AFunctionClassBodyElem */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PClassBodyElem pclassbodyelemNode1;
        {
            // Block
        PFunctionDefinition pfunctiondefinitionNode2;
        pfunctiondefinitionNode2 = (PFunctionDefinition)nodeArrayList1.get(0);

        pclassbodyelemNode1 = new AFunctionClassBodyElem(pfunctiondefinitionNode2);
        }
	nodeList.add(pclassbodyelemNode1);
        return nodeList;
    }



    
    ArrayList new9() /* reduce AVariableClassBodyElem */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PClassBodyElem pclassbodyelemNode1;
        {
            // Block
        PVariableDefinition pvariabledefinitionNode2;
        TSemi tsemiNode3;
        pvariabledefinitionNode2 = (PVariableDefinition)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pclassbodyelemNode1 = new AVariableClassBodyElem(pvariabledefinitionNode2, tsemiNode3);
        }
	nodeList.add(pclassbodyelemNode1);
        return nodeList;
    }



    
    ArrayList new10() /* reduce AConstantClassBodyElem */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PClassBodyElem pclassbodyelemNode1;
        {
            // Block
        PConstantDefinition pconstantdefinitionNode2;
        TSemi tsemiNode3;
        pconstantdefinitionNode2 = (PConstantDefinition)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pclassbodyelemNode1 = new AConstantClassBodyElem(pconstantdefinitionNode2, tsemiNode3);
        }
	nodeList.add(pclassbodyelemNode1);
        return nodeList;
    }



    
    ArrayList new11() /* reduce AFunctionDefinition */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        PFunctionDeclaration pfunctiondeclarationNode2;
        PFunctionBody pfunctionbodyNode3;
        pfunctiondeclarationNode2 = (PFunctionDeclaration)nodeArrayList1.get(0);
        pfunctionbodyNode3 = (PFunctionBody)nodeArrayList2.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(pfunctiondeclarationNode2, pfunctionbodyNode3);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    
    ArrayList new12() /* reduce AVariableDefinition */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PVariableDefinition pvariabledefinitionNode1;
        {
            // Block
        PVariableType pvariabletypeNode2;
        PVariableName pvariablenameNode3;
        pvariabletypeNode2 = (PVariableType)nodeArrayList1.get(0);
        pvariablenameNode3 = (PVariableName)nodeArrayList2.get(0);

        pvariabledefinitionNode1 = new AVariableDefinition(pvariabletypeNode2, pvariablenameNode3);
        }
	nodeList.add(pvariabledefinitionNode1);
        return nodeList;
    }



    
    ArrayList new13() /* reduce AConstantDefinition */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = pop();
        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PConstantDefinition pconstantdefinitionNode1;
        {
            // Block
        TFinal tfinalNode2;
        PVariableType pvariabletypeNode3;
        PVariableName pvariablenameNode4;
        TAssign tassignNode5;
        PLiteral pliteralNode6;
        tfinalNode2 = (TFinal)nodeArrayList1.get(0);
        pvariabletypeNode3 = (PVariableType)nodeArrayList2.get(0);
        pvariablenameNode4 = (PVariableName)nodeArrayList3.get(0);
        tassignNode5 = (TAssign)nodeArrayList4.get(0);
        pliteralNode6 = (PLiteral)nodeArrayList5.get(0);

        pconstantdefinitionNode1 = new AConstantDefinition(tfinalNode2, pvariabletypeNode3, pvariablenameNode4, tassignNode5, pliteralNode6);
        }
	nodeList.add(pconstantdefinitionNode1);
        return nodeList;
    }



    
    ArrayList new14() /* reduce AStringLiteral */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PLiteralString pliteralstringNode2;
        pliteralstringNode2 = (PLiteralString)nodeArrayList1.get(0);

        pliteralNode1 = new AStringLiteral(pliteralstringNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    
    ArrayList new15() /* reduce ABooleanLiteral */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TLiteralBoolean tliteralbooleanNode2;
        tliteralbooleanNode2 = (TLiteralBoolean)nodeArrayList1.get(0);

        pliteralNode1 = new ABooleanLiteral(tliteralbooleanNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    
    ArrayList new16() /* reduce ANumericLiteral */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PLiteralNumeric pliteralnumericNode2;
        pliteralnumericNode2 = (PLiteralNumeric)nodeArrayList1.get(0);

        pliteralNode1 = new ANumericLiteral(pliteralnumericNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    
    ArrayList new17() /* reduce ANullLiteral */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TLiteralNull tliteralnullNode2;
        tliteralnullNode2 = (TLiteralNull)nodeArrayList1.get(0);

        pliteralNode1 = new ANullLiteral(tliteralnullNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    
    ArrayList new18() /* reduce AAliteralstring1LiteralString */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PLiteralString pliteralstringNode1;
        {
            // Block
        TDoubleQuote tdoublequoteNode2;
        LinkedList listNode3 = new LinkedList();
        PDoubleQuoteClosing pdoublequoteclosingNode4;
        tdoublequoteNode2 = (TDoubleQuote)nodeArrayList1.get(0);
        {
            // Block
        }
        pdoublequoteclosingNode4 = (PDoubleQuoteClosing)nodeArrayList2.get(0);

        pliteralstringNode1 = new ALiteralString(tdoublequoteNode2, listNode3, pdoublequoteclosingNode4);
        }
	nodeList.add(pliteralstringNode1);
        return nodeList;
    }



    
    ArrayList new19() /* reduce AAliteralstring2LiteralString */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PLiteralString pliteralstringNode1;
        {
            // Block
        TDoubleQuote tdoublequoteNode2;
        LinkedList listNode4 = new LinkedList();
        PDoubleQuoteClosing pdoublequoteclosingNode5;
        tdoublequoteNode2 = (TDoubleQuote)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pdoublequoteclosingNode5 = (PDoubleQuoteClosing)nodeArrayList3.get(0);

        pliteralstringNode1 = new ALiteralString(tdoublequoteNode2, listNode4, pdoublequoteclosingNode5);
        }
	nodeList.add(pliteralstringNode1);
        return nodeList;
    }



    
    ArrayList new20() /* reduce ADoubleQuoteClosing */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PDoubleQuoteClosing pdoublequoteclosingNode1;
        {
            // Block
        TDoubleQuote tdoublequoteNode2;
        tdoublequoteNode2 = (TDoubleQuote)nodeArrayList1.get(0);

        pdoublequoteclosingNode1 = new ADoubleQuoteClosing(tdoublequoteNode2);
        }
	nodeList.add(pdoublequoteclosingNode1);
        return nodeList;
    }



    
    ArrayList new21() /* reduce AIntLiteralNumeric */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PLiteralNumeric pliteralnumericNode1;
        {
            // Block
        PInteger pintegerNode2;
        pintegerNode2 = (PInteger)nodeArrayList1.get(0);

        pliteralnumericNode1 = new AIntLiteralNumeric(pintegerNode2);
        }
	nodeList.add(pliteralnumericNode1);
        return nodeList;
    }



    
    ArrayList new22() /* reduce AFracLiteralNumeric */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PLiteralNumeric pliteralnumericNode1;
        {
            // Block
        TDot tdotNode2;
        TNonNegativeInteger tnonnegativeintegerNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        tnonnegativeintegerNode3 = (TNonNegativeInteger)nodeArrayList2.get(0);

        pliteralnumericNode1 = new AFracLiteralNumeric(tdotNode2, tnonnegativeintegerNode3);
        }
	nodeList.add(pliteralnumericNode1);
        return nodeList;
    }



    
    ArrayList new23() /* reduce ARealLiteralNumeric */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PLiteralNumeric pliteralnumericNode1;
        {
            // Block
        PInteger pintegerNode2;
        TDot tdotNode3;
        TNonNegativeInteger tnonnegativeintegerNode4;
        pintegerNode2 = (PInteger)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tnonnegativeintegerNode4 = (TNonNegativeInteger)nodeArrayList3.get(0);

        pliteralnumericNode1 = new ARealLiteralNumeric(pintegerNode2, tdotNode3, tnonnegativeintegerNode4);
        }
	nodeList.add(pliteralnumericNode1);
        return nodeList;
    }



    
    ArrayList new24() /* reduce ASimpleInteger */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PInteger pintegerNode1;
        {
            // Block
        TNonNegativeInteger tnonnegativeintegerNode2;
        tnonnegativeintegerNode2 = (TNonNegativeInteger)nodeArrayList1.get(0);

        pintegerNode1 = new ASimpleInteger(tnonnegativeintegerNode2);
        }
	nodeList.add(pintegerNode1);
        return nodeList;
    }



    
    ArrayList new25() /* reduce APositiveSignedInteger */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PInteger pintegerNode1;
        {
            // Block
        TPlus tplusNode2;
        TNonNegativeInteger tnonnegativeintegerNode3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        tnonnegativeintegerNode3 = (TNonNegativeInteger)nodeArrayList2.get(0);

        pintegerNode1 = new APositiveSignedInteger(tplusNode2, tnonnegativeintegerNode3);
        }
	nodeList.add(pintegerNode1);
        return nodeList;
    }



    
    ArrayList new26() /* reduce ANegativeInteger */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PInteger pintegerNode1;
        {
            // Block
        TMinus tminusNode2;
        TNonNegativeInteger tnonnegativeintegerNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        tnonnegativeintegerNode3 = (TNonNegativeInteger)nodeArrayList2.get(0);

        pintegerNode1 = new ANegativeInteger(tminusNode2, tnonnegativeintegerNode3);
        }
	nodeList.add(pintegerNode1);
        return nodeList;
    }



    
    ArrayList new27() /* reduce AVariableName */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PVariableName pvariablenameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvariablenameNode1 = new AVariableName(tidentifierNode2);
        }
	nodeList.add(pvariablenameNode1);
        return nodeList;
    }



    
    ArrayList new28() /* reduce AFunctionName */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PFunctionName pfunctionnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfunctionnameNode1 = new AFunctionName(tidentifierNode2);
        }
	nodeList.add(pfunctionnameNode1);
        return nodeList;
    }



    
    ArrayList new29() /* reduce AFunctionDeclaration */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = pop();
        ArrayList nodeArrayList5 = pop();
        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PFunctionDeclaration pfunctiondeclarationNode1;
        {
            // Block
        TPublic tpublicNode2;
        PResultType presulttypeNode3;
        PFunctionName pfunctionnameNode4;
        TLPar tlparNode5;
        PFormalArgList pformalarglistNode6;
        TRPar trparNode7;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        presulttypeNode3 = (PResultType)nodeArrayList2.get(0);
        pfunctionnameNode4 = (PFunctionName)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pformalarglistNode6 = (PFormalArgList)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        pfunctiondeclarationNode1 = new AFunctionDeclaration(tpublicNode2, presulttypeNode3, pfunctionnameNode4, tlparNode5, pformalarglistNode6, trparNode7);
        }
	nodeList.add(pfunctiondeclarationNode1);
        return nodeList;
    }



    
    ArrayList new30() /* reduce AVoidResultType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PResultType presulttypeNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        presulttypeNode1 = new AVoidResultType(tvoidNode2);
        }
	nodeList.add(presulttypeNode1);
        return nodeList;
    }



    
    ArrayList new31() /* reduce AVariableResultType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PResultType presulttypeNode1;
        {
            // Block
        PVariableType pvariabletypeNode2;
        pvariabletypeNode2 = (PVariableType)nodeArrayList1.get(0);

        presulttypeNode1 = new AVariableResultType(pvariabletypeNode2);
        }
	nodeList.add(presulttypeNode1);
        return nodeList;
    }



    
    ArrayList new32() /* reduce AScalarVariableType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PVariableType pvariabletypeNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        pvariabletypeNode1 = new AScalarVariableType(ptypeNode2);
        }
	nodeList.add(pvariabletypeNode1);
        return nodeList;
    }



    
    ArrayList new33() /* reduce AArrayVariableType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PVariableType pvariabletypeNode1;
        {
            // Block
        PType ptypeNode2;
        TLBkt tlbktNode3;
        TRBkt trbktNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tlbktNode3 = (TLBkt)nodeArrayList2.get(0);
        trbktNode4 = (TRBkt)nodeArrayList3.get(0);

        pvariabletypeNode1 = new AArrayVariableType(ptypeNode2, tlbktNode3, trbktNode4);
        }
	nodeList.add(pvariabletypeNode1);
        return nodeList;
    }



    
    ArrayList new34() /* reduce ABooleanType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    
    ArrayList new35() /* reduce AIntType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    
    ArrayList new36() /* reduce AStringType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TStringToken tstringtokenNode2;
        tstringtokenNode2 = (TStringToken)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringtokenNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    
    ArrayList new37() /* reduce ATypeType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PTypeName ptypenameNode2;
        ptypenameNode2 = (PTypeName)nodeArrayList1.get(0);

        ptypeNode1 = new ATypeType(ptypenameNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    
    ArrayList new38() /* reduce ATypeName */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PTypeName ptypenameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ptypenameNode1 = new ATypeName(tidentifierNode2);
        }
	nodeList.add(ptypenameNode1);
        return nodeList;
    }



    
    ArrayList new39() /* reduce ANothingFormalArgList */
    {
        ArrayList nodeList = new ArrayList();

        PFormalArgList pformalarglistNode1;
        {
            // Block

        pformalarglistNode1 = new ANothingFormalArgList();
        }
	nodeList.add(pformalarglistNode1);
        return nodeList;
    }



    
    ArrayList new40() /* reduce ASingleVarFormalArgList */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PFormalArgList pformalarglistNode1;
        {
            // Block
        PVariableDefinition pvariabledefinitionNode2;
        TComma tcommaNode3;
        PFormalArgList pformalarglistNode4;
        pvariabledefinitionNode2 = (PVariableDefinition)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pformalarglistNode4 = (PFormalArgList)nodeArrayList3.get(0);

        pformalarglistNode1 = new ASingleVarFormalArgList(pvariabledefinitionNode2, tcommaNode3, pformalarglistNode4);
        }
	nodeList.add(pformalarglistNode1);
        return nodeList;
    }



    
    ArrayList new41() /* reduce AMultipleNVarFormalArgList */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PFormalArgList pformalarglistNode1;
        {
            // Block
        PVariableDefinition pvariabledefinitionNode2;
        pvariabledefinitionNode2 = (PVariableDefinition)nodeArrayList1.get(0);

        pformalarglistNode1 = new AMultipleNVarFormalArgList(pvariabledefinitionNode2);
        }
	nodeList.add(pformalarglistNode1);
        return nodeList;
    }



    
    ArrayList new42() /* reduce AMethodName */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PMethodName pmethodnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pmethodnameNode1 = new AMethodName(tidentifierNode2);
        }
	nodeList.add(pmethodnameNode1);
        return nodeList;
    }



    
    ArrayList new43() /* reduce AConstantName */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PConstantName pconstantnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pconstantnameNode1 = new AConstantName(tidentifierNode2);
        }
	nodeList.add(pconstantnameNode1);
        return nodeList;
    }



    
    ArrayList new44() /* reduce ANormalFunctionBody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = pop();
        ArrayList nodeArrayList5 = pop();
        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PFunctionBody pfunctionbodyNode1;
        {
            // Block
        TLBrc tlbrcNode2;
        PBlock pblockNode3;
        TReturn treturnNode4;
        PExpression pexpressionNode5;
        TSemi tsemiNode6;
        TRBrc trbrcNode7;
        tlbrcNode2 = (TLBrc)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);
        treturnNode4 = (TReturn)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        tsemiNode6 = (TSemi)nodeArrayList5.get(0);
        trbrcNode7 = (TRBrc)nodeArrayList6.get(0);

        pfunctionbodyNode1 = new ANormalFunctionBody(tlbrcNode2, pblockNode3, treturnNode4, pexpressionNode5, tsemiNode6, trbrcNode7);
        }
	nodeList.add(pfunctionbodyNode1);
        return nodeList;
    }



    
    ArrayList new45() /* reduce AVoidFunctionBody */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = pop();
        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PFunctionBody pfunctionbodyNode1;
        {
            // Block
        TLBrc tlbrcNode2;
        PBlock pblockNode3;
        TReturn treturnNode4;
        TSemi tsemiNode5;
        TRBrc trbrcNode6;
        tlbrcNode2 = (TLBrc)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);
        treturnNode4 = (TReturn)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);
        trbrcNode6 = (TRBrc)nodeArrayList5.get(0);

        pfunctionbodyNode1 = new AVoidFunctionBody(tlbrcNode2, pblockNode3, treturnNode4, tsemiNode5, trbrcNode6);
        }
	nodeList.add(pfunctionbodyNode1);
        return nodeList;
    }



    
    ArrayList new46() /* reduce AAsingleblock1Block */
    {
        ArrayList nodeList = new ArrayList();

        PBlock pblockNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pblockNode1 = new ASingleBlock(listNode2);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    
    ArrayList new47() /* reduce AAsingleblock2Block */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pblockNode1 = new ASingleBlock(listNode3);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    
    ArrayList new48() /* reduce ASimpleOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TSemi tsemiNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        poperatorNode1 = new ASimpleOperator(pexpressionNode2, tsemiNode3);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    
    ArrayList new49() /* reduce AAssignOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        PVariableName pvariablenameNode2;
        TAssign tassignNode3;
        PExpression pexpressionNode4;
        TSemi tsemiNode5;
        pvariablenameNode2 = (PVariableName)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        poperatorNode1 = new AAssignOperator(pvariablenameNode2, tassignNode3, pexpressionNode4, tsemiNode5);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    
    ArrayList new50() /* reduce ACondOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        PConditionalOperator pconditionaloperatorNode2;
        pconditionaloperatorNode2 = (PConditionalOperator)nodeArrayList1.get(0);

        poperatorNode1 = new ACondOperator(pconditionaloperatorNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    
    ArrayList new51() /* reduce ACycleOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        PCycleOperator pcycleoperatorNode2;
        pcycleoperatorNode2 = (PCycleOperator)nodeArrayList1.get(0);

        poperatorNode1 = new ACycleOperator(pcycleoperatorNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    
    ArrayList new52() /* reduce ASimpleIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = pop();
        ArrayList nodeArrayList6 = pop();
        ArrayList nodeArrayList5 = pop();
        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PSimpleIf psimpleifNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrc tlbrcNode6;
        PBlock pblockNode7;
        TRBrc trbrcNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbrcNode6 = (TLBrc)nodeArrayList5.get(0);
        pblockNode7 = (PBlock)nodeArrayList6.get(0);
        trbrcNode8 = (TRBrc)nodeArrayList7.get(0);

        psimpleifNode1 = new ASimpleIf(tifNode2, tlparNode3, pexpressionNode4, trparNode5, tlbrcNode6, pblockNode7, trbrcNode8);
        }
	nodeList.add(psimpleifNode1);
        return nodeList;
    }



    
    ArrayList new53() /* reduce ASimpleConditionalOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PConditionalOperator pconditionaloperatorNode1;
        {
            // Block
        PSimpleIf psimpleifNode2;
        psimpleifNode2 = (PSimpleIf)nodeArrayList1.get(0);

        pconditionaloperatorNode1 = new ASimpleConditionalOperator(psimpleifNode2);
        }
	nodeList.add(pconditionaloperatorNode1);
        return nodeList;
    }



    
    ArrayList new54() /* reduce AElseConditionalOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = pop();
        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PConditionalOperator pconditionaloperatorNode1;
        {
            // Block
        PSimpleIf psimpleifNode2;
        TElse telseNode3;
        TLBrc tlbrcNode4;
        PBlock pblockNode5;
        TRBrc trbrcNode6;
        psimpleifNode2 = (PSimpleIf)nodeArrayList1.get(0);
        telseNode3 = (TElse)nodeArrayList2.get(0);
        tlbrcNode4 = (TLBrc)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);
        trbrcNode6 = (TRBrc)nodeArrayList5.get(0);

        pconditionaloperatorNode1 = new AElseConditionalOperator(psimpleifNode2, telseNode3, tlbrcNode4, pblockNode5, trbrcNode6);
        }
	nodeList.add(pconditionaloperatorNode1);
        return nodeList;
    }



    
    ArrayList new55() /* reduce ACycleCycleOperator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = pop();
        ArrayList nodeArrayList6 = pop();
        ArrayList nodeArrayList5 = pop();
        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PCycleOperator pcycleoperatorNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TLBrc tlbrcNode6;
        PBlock pblockNode7;
        TRBrc trbrcNode8;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbrcNode6 = (TLBrc)nodeArrayList5.get(0);
        pblockNode7 = (PBlock)nodeArrayList6.get(0);
        trbrcNode8 = (TRBrc)nodeArrayList7.get(0);

        pcycleoperatorNode1 = new ACycleCycleOperator(twhileNode2, tlparNode3, pexpressionNode4, trparNode5, tlbrcNode6, pblockNode7, trbrcNode8);
        }
	nodeList.add(pcycleoperatorNode1);
        return nodeList;
    }



    
    ArrayList new56() /* reduce ASimpleExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        POperandOr poperandorNode2;
        poperandorNode2 = (POperandOr)nodeArrayList1.get(0);

        pexpressionNode1 = new ASimpleExpression(poperandorNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    
    ArrayList new57() /* reduce AOrExprExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        POperandOr poperandorNode2;
        TBarBar tbarbarNode3;
        PExpression pexpressionNode4;
        poperandorNode2 = (POperandOr)nodeArrayList1.get(0);
        tbarbarNode3 = (TBarBar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AOrExprExpression(poperandorNode2, tbarbarNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    
    ArrayList new58() /* reduce ASimpleOperandOr */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        POperandOr poperandorNode1;
        {
            // Block
        POperandAnd poperandandNode2;
        poperandandNode2 = (POperandAnd)nodeArrayList1.get(0);

        poperandorNode1 = new ASimpleOperandOr(poperandandNode2);
        }
	nodeList.add(poperandorNode1);
        return nodeList;
    }



    
    ArrayList new59() /* reduce AAndOperandOr */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        POperandOr poperandorNode1;
        {
            // Block
        POperandAnd poperandandNode2;
        TAmpAmp tampampNode3;
        POperandOr poperandorNode4;
        poperandandNode2 = (POperandAnd)nodeArrayList1.get(0);
        tampampNode3 = (TAmpAmp)nodeArrayList2.get(0);
        poperandorNode4 = (POperandOr)nodeArrayList3.get(0);

        poperandorNode1 = new AAndOperandOr(poperandandNode2, tampampNode3, poperandorNode4);
        }
	nodeList.add(poperandorNode1);
        return nodeList;
    }



    
    ArrayList new60() /* reduce ASimpleOperandAnd */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        POperandAnd poperandandNode1;
        {
            // Block
        PComparisonExpression pcomparisonexpressionNode2;
        pcomparisonexpressionNode2 = (PComparisonExpression)nodeArrayList1.get(0);

        poperandandNode1 = new ASimpleOperandAnd(pcomparisonexpressionNode2);
        }
	nodeList.add(poperandandNode1);
        return nodeList;
    }



    
    ArrayList new61() /* reduce AEqOperandAnd */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        POperandAnd poperandandNode1;
        {
            // Block
        PComparisonExpression pcomparisonexpressionNode2;
        TEq teqNode3;
        POperandAnd poperandandNode4;
        pcomparisonexpressionNode2 = (PComparisonExpression)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        poperandandNode4 = (POperandAnd)nodeArrayList3.get(0);

        poperandandNode1 = new AEqOperandAnd(pcomparisonexpressionNode2, teqNode3, poperandandNode4);
        }
	nodeList.add(poperandandNode1);
        return nodeList;
    }



    
    ArrayList new62() /* reduce ANeqOperandAnd */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        POperandAnd poperandandNode1;
        {
            // Block
        PComparisonExpression pcomparisonexpressionNode2;
        TNeq tneqNode3;
        POperandAnd poperandandNode4;
        pcomparisonexpressionNode2 = (PComparisonExpression)nodeArrayList1.get(0);
        tneqNode3 = (TNeq)nodeArrayList2.get(0);
        poperandandNode4 = (POperandAnd)nodeArrayList3.get(0);

        poperandandNode1 = new ANeqOperandAnd(pcomparisonexpressionNode2, tneqNode3, poperandandNode4);
        }
	nodeList.add(poperandandNode1);
        return nodeList;
    }



    
    ArrayList new63() /* reduce ASimpleComparisonExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PComparisonExpression pcomparisonexpressionNode1;
        {
            // Block
        PSimpleExpression psimpleexpressionNode2;
        psimpleexpressionNode2 = (PSimpleExpression)nodeArrayList1.get(0);

        pcomparisonexpressionNode1 = new ASimpleComparisonExpression(psimpleexpressionNode2);
        }
	nodeList.add(pcomparisonexpressionNode1);
        return nodeList;
    }



    
    ArrayList new64() /* reduce AGtComparisonExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PComparisonExpression pcomparisonexpressionNode1;
        {
            // Block
        PSimpleExpression psimpleexpressionNode2;
        TGt tgtNode3;
        PComparisonExpression pcomparisonexpressionNode4;
        psimpleexpressionNode2 = (PSimpleExpression)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        pcomparisonexpressionNode4 = (PComparisonExpression)nodeArrayList3.get(0);

        pcomparisonexpressionNode1 = new AGtComparisonExpression(psimpleexpressionNode2, tgtNode3, pcomparisonexpressionNode4);
        }
	nodeList.add(pcomparisonexpressionNode1);
        return nodeList;
    }



    
    ArrayList new65() /* reduce ALtComparisonExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PComparisonExpression pcomparisonexpressionNode1;
        {
            // Block
        PSimpleExpression psimpleexpressionNode2;
        TLt tltNode3;
        PComparisonExpression pcomparisonexpressionNode4;
        psimpleexpressionNode2 = (PSimpleExpression)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        pcomparisonexpressionNode4 = (PComparisonExpression)nodeArrayList3.get(0);

        pcomparisonexpressionNode1 = new ALtComparisonExpression(psimpleexpressionNode2, tltNode3, pcomparisonexpressionNode4);
        }
	nodeList.add(pcomparisonexpressionNode1);
        return nodeList;
    }



    
    ArrayList new66() /* reduce ALteqComparisonExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PComparisonExpression pcomparisonexpressionNode1;
        {
            // Block
        PSimpleExpression psimpleexpressionNode2;
        TLteq tlteqNode3;
        PComparisonExpression pcomparisonexpressionNode4;
        psimpleexpressionNode2 = (PSimpleExpression)nodeArrayList1.get(0);
        tlteqNode3 = (TLteq)nodeArrayList2.get(0);
        pcomparisonexpressionNode4 = (PComparisonExpression)nodeArrayList3.get(0);

        pcomparisonexpressionNode1 = new ALteqComparisonExpression(psimpleexpressionNode2, tlteqNode3, pcomparisonexpressionNode4);
        }
	nodeList.add(pcomparisonexpressionNode1);
        return nodeList;
    }



    
    ArrayList new67() /* reduce AGteqComparisonExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PComparisonExpression pcomparisonexpressionNode1;
        {
            // Block
        PSimpleExpression psimpleexpressionNode2;
        TGteq tgteqNode3;
        PComparisonExpression pcomparisonexpressionNode4;
        psimpleexpressionNode2 = (PSimpleExpression)nodeArrayList1.get(0);
        tgteqNode3 = (TGteq)nodeArrayList2.get(0);
        pcomparisonexpressionNode4 = (PComparisonExpression)nodeArrayList3.get(0);

        pcomparisonexpressionNode1 = new AGteqComparisonExpression(psimpleexpressionNode2, tgteqNode3, pcomparisonexpressionNode4);
        }
	nodeList.add(pcomparisonexpressionNode1);
        return nodeList;
    }



    
    ArrayList new68() /* reduce ASimpleSimpleExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PSimpleExpression psimpleexpressionNode1;
        {
            // Block
        PSummand psummandNode2;
        psummandNode2 = (PSummand)nodeArrayList1.get(0);

        psimpleexpressionNode1 = new ASimpleSimpleExpression(psummandNode2);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    
    ArrayList new69() /* reduce AAddSimpleExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PSimpleExpression psimpleexpressionNode1;
        {
            // Block
        PSummand psummandNode2;
        TPlus tplusNode3;
        PSimpleExpression psimpleexpressionNode4;
        psummandNode2 = (PSummand)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        psimpleexpressionNode4 = (PSimpleExpression)nodeArrayList3.get(0);

        psimpleexpressionNode1 = new AAddSimpleExpression(psummandNode2, tplusNode3, psimpleexpressionNode4);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    
    ArrayList new70() /* reduce ASubSimpleExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PSimpleExpression psimpleexpressionNode1;
        {
            // Block
        PSummand psummandNode2;
        TMinus tminusNode3;
        PSimpleExpression psimpleexpressionNode4;
        psummandNode2 = (PSummand)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        psimpleexpressionNode4 = (PSimpleExpression)nodeArrayList3.get(0);

        psimpleexpressionNode1 = new ASubSimpleExpression(psummandNode2, tminusNode3, psimpleexpressionNode4);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    
    ArrayList new71() /* reduce ASimpleSummand */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PSummand psummandNode1;
        {
            // Block
        PMultiplier pmultiplierNode2;
        pmultiplierNode2 = (PMultiplier)nodeArrayList1.get(0);

        psummandNode1 = new ASimpleSummand(pmultiplierNode2);
        }
	nodeList.add(psummandNode1);
        return nodeList;
    }



    
    ArrayList new72() /* reduce AMulSummand */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PSummand psummandNode1;
        {
            // Block
        PMultiplier pmultiplierNode2;
        TStar tstarNode3;
        PSummand psummandNode4;
        pmultiplierNode2 = (PMultiplier)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        psummandNode4 = (PSummand)nodeArrayList3.get(0);

        psummandNode1 = new AMulSummand(pmultiplierNode2, tstarNode3, psummandNode4);
        }
	nodeList.add(psummandNode1);
        return nodeList;
    }



    
    ArrayList new73() /* reduce ADivSummand */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PSummand psummandNode1;
        {
            // Block
        PMultiplier pmultiplierNode2;
        TSlash tslashNode3;
        PSummand psummandNode4;
        pmultiplierNode2 = (PMultiplier)nodeArrayList1.get(0);
        tslashNode3 = (TSlash)nodeArrayList2.get(0);
        psummandNode4 = (PSummand)nodeArrayList3.get(0);

        psummandNode1 = new ADivSummand(pmultiplierNode2, tslashNode3, psummandNode4);
        }
	nodeList.add(psummandNode1);
        return nodeList;
    }



    
    ArrayList new74() /* reduce ARemSummand */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PSummand psummandNode1;
        {
            // Block
        PMultiplier pmultiplierNode2;
        TPercent tpercentNode3;
        PSummand psummandNode4;
        pmultiplierNode2 = (PMultiplier)nodeArrayList1.get(0);
        tpercentNode3 = (TPercent)nodeArrayList2.get(0);
        psummandNode4 = (PSummand)nodeArrayList3.get(0);

        psummandNode1 = new ARemSummand(pmultiplierNode2, tpercentNode3, psummandNode4);
        }
	nodeList.add(psummandNode1);
        return nodeList;
    }



    
    ArrayList new75() /* reduce ASimpleMultiplier */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PMultiplier pmultiplierNode1;
        {
            // Block
        PCast pcastNode2;
        pcastNode2 = (PCast)nodeArrayList1.get(0);

        pmultiplierNode1 = new ASimpleMultiplier(pcastNode2);
        }
	nodeList.add(pmultiplierNode1);
        return nodeList;
    }



    
    ArrayList new76() /* reduce ANegMultiplier */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PMultiplier pmultiplierNode1;
        {
            // Block
        TEmark temarkNode2;
        PMultiplier pmultiplierNode3;
        temarkNode2 = (TEmark)nodeArrayList1.get(0);
        pmultiplierNode3 = (PMultiplier)nodeArrayList2.get(0);

        pmultiplierNode1 = new ANegMultiplier(temarkNode2, pmultiplierNode3);
        }
	nodeList.add(pmultiplierNode1);
        return nodeList;
    }



    
    ArrayList new77() /* reduce ASimpleCast */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PCast pcastNode1;
        {
            // Block
        PElementalExpression pelementalexpressionNode2;
        pelementalexpressionNode2 = (PElementalExpression)nodeArrayList1.get(0);

        pcastNode1 = new ASimpleCast(pelementalexpressionNode2);
        }
	nodeList.add(pcastNode1);
        return nodeList;
    }



    
    ArrayList new78() /* reduce ANegCast */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PCast pcastNode1;
        {
            // Block
        TLPar tlparNode2;
        PVariableType pvariabletypeNode3;
        TRPar trparNode4;
        PCast pcastNode5;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pvariabletypeNode3 = (PVariableType)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);
        pcastNode5 = (PCast)nodeArrayList4.get(0);

        pcastNode1 = new ANegCast(tlparNode2, pvariabletypeNode3, trparNode4, pcastNode5);
        }
	nodeList.add(pcastNode1);
        return nodeList;
    }



    
    ArrayList new79() /* reduce ARecursiveElementalExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PElementalExpression pelementalexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TDot tdotNode3;
        PElementalExpression pelementalexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pelementalexpressionNode4 = (PElementalExpression)nodeArrayList3.get(0);

        pelementalexpressionNode1 = new ARecursiveElementalExpression(tidentifierNode2, tdotNode3, pelementalexpressionNode4);
        }
	nodeList.add(pelementalexpressionNode1);
        return nodeList;
    }



    
    ArrayList new80() /* reduce AArrElemElementalExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PElementalExpression pelementalexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLBkt tlbktNode3;
        PExpression pexpressionNode4;
        TRBkt trbktNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlbktNode3 = (TLBkt)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trbktNode5 = (TRBkt)nodeArrayList4.get(0);

        pelementalexpressionNode1 = new AArrElemElementalExpression(tidentifierNode2, tlbktNode3, pexpressionNode4, trbktNode5);
        }
	nodeList.add(pelementalexpressionNode1);
        return nodeList;
    }



    
    ArrayList new81() /* reduce ACallElementalExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = pop();
        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PElementalExpression pelementalexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        PFactArgList pfactarglistNode4;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pfactarglistNode4 = (PFactArgList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pelementalexpressionNode1 = new ACallElementalExpression(tidentifierNode2, tlparNode3, pfactarglistNode4, trparNode5);
        }
	nodeList.add(pelementalexpressionNode1);
        return nodeList;
    }



    
    ArrayList new82() /* reduce ALiteralElementalExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PElementalExpression pelementalexpressionNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        pelementalexpressionNode1 = new ALiteralElementalExpression(pliteralNode2);
        }
	nodeList.add(pelementalexpressionNode1);
        return nodeList;
    }



    
    ArrayList new83() /* reduce AIdentifierElementalExpression */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PElementalExpression pelementalexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pelementalexpressionNode1 = new AIdentifierElementalExpression(tidentifierNode2);
        }
	nodeList.add(pelementalexpressionNode1);
        return nodeList;
    }



    
    ArrayList new84() /* reduce ASingleFactArgList */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        PFactArgList pfactarglistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pfactarglistNode1 = new ASingleFactArgList(pexpressionNode2);
        }
	nodeList.add(pfactarglistNode1);
        return nodeList;
    }



    
    ArrayList new85() /* reduce AMultipleFactArgList */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = pop();
        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        PFactArgList pfactarglistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TComma tcommaNode3;
        PFactArgList pfactarglistNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pfactarglistNode4 = (PFactArgList)nodeArrayList3.get(0);

        pfactarglistNode1 = new AMultipleFactArgList(pexpressionNode2, tcommaNode3, pfactarglistNode4);
        }
	nodeList.add(pfactarglistNode1);
        return nodeList;
    }



    
    ArrayList new86() /* reduce ATerminal$ClassBodyElem */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PClassBodyElem pclassbodyelemNode1;
        pclassbodyelemNode1 = (PClassBodyElem)nodeArrayList1.get(0);
	if(pclassbodyelemNode1 != null)
	{
	  listNode2.add(pclassbodyelemNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    
    ArrayList new87() /* reduce ANonTerminal$ClassBodyElem */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PClassBodyElem pclassbodyelemNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassbodyelemNode2 = (PClassBodyElem)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassbodyelemNode2 != null)
	{
	  listNode3.add(pclassbodyelemNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    
    ArrayList new88() /* reduce ATerminal$Char */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TChar tcharNode1;
        tcharNode1 = (TChar)nodeArrayList1.get(0);
	if(tcharNode1 != null)
	{
	  listNode2.add(tcharNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    
    ArrayList new89() /* reduce ANonTerminal$Char */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TChar tcharNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tcharNode2 = (TChar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tcharNode2 != null)
	{
	  listNode3.add(tcharNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    
    ArrayList new90() /* reduce ATerminal$Operator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        POperator poperatorNode1;
        poperatorNode1 = (POperator)nodeArrayList1.get(0);
	if(poperatorNode1 != null)
	{
	  listNode2.add(poperatorNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    
    ArrayList new91() /* reduce ANonTerminal$Operator */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = pop();
        ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        POperator poperatorNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        poperatorNode2 = (POperator)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(poperatorNode2 != null)
	{
	  listNode3.add(poperatorNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    public static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {34, SHIFT, 1}, },
			{{-1, ERROR, 1}, {26, SHIFT, 4}, },
			{{-1, ERROR, 2}, {46, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {26, SHIFT, 5}, },
			{{-1, ERROR, 4}, {43, SHIFT, 8}, },
			{{-1, ERROR, 5}, {43, SHIFT, 9}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, {26, SHIFT, 5}, },
			{{-1, ERROR, 8}, {3, SHIFT, 11}, },
			{{-1, ERROR, 9}, {3, SHIFT, 12}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 6}, {25, SHIFT, 13}, {28, SHIFT, 14}, {32, SHIFT, 15}, {34, SHIFT, 16}, {40, SHIFT, 17}, {43, SHIFT, 18}, },
			{{-1, REDUCE, 6}, {25, SHIFT, 13}, {28, SHIFT, 14}, {32, SHIFT, 15}, {34, SHIFT, 16}, {40, SHIFT, 17}, {43, SHIFT, 18}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 14}, {25, SHIFT, 13}, {32, SHIFT, 15}, {40, SHIFT, 17}, {43, SHIFT, 18}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 16}, {25, SHIFT, 13}, {32, SHIFT, 15}, {38, SHIFT, 31}, {40, SHIFT, 17}, {43, SHIFT, 18}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 19}, {6, SHIFT, 34}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 22}, {8, SHIFT, 35}, },
			{{-1, ERROR, 23}, {8, SHIFT, 36}, },
			{{-1, ERROR, 24}, {3, SHIFT, 37}, },
			{{-1, ERROR, 25}, {43, SHIFT, 39}, },
			{{-1, REDUCE, 32}, {2, SHIFT, 41}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 7}, {25, SHIFT, 13}, {28, SHIFT, 14}, {32, SHIFT, 15}, {34, SHIFT, 16}, {40, SHIFT, 17}, {43, SHIFT, 18}, },
			{{-1, ERROR, 29}, {6, SHIFT, 43}, },
			{{-1, ERROR, 30}, {43, SHIFT, 39}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 32}, {43, SHIFT, 45}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 46}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {31, SHIFT, 53}, {39, SHIFT, 54}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 57}, {44, SHIFT, 58}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 41}, {5, SHIFT, 79}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 44}, {11, SHIFT, 80}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 46}, {4, SHIFT, 81}, },
			{{-1, ERROR, 47}, {44, SHIFT, 82}, },
			{{-1, ERROR, 48}, {25, SHIFT, 13}, {32, SHIFT, 15}, {40, SHIFT, 17}, {43, SHIFT, 18}, },
			{{-1, ERROR, 49}, {9, SHIFT, 84}, {45, SHIFT, 85}, },
			{{-1, ERROR, 50}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 51}, {44, SHIFT, 90}, },
			{{-1, ERROR, 52}, {44, SHIFT, 91}, },
			{{-1, ERROR, 53}, {4, SHIFT, 92}, },
			{{-1, ERROR, 54}, {4, SHIFT, 93}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 83}, {1, SHIFT, 94}, {2, SHIFT, 95}, {4, SHIFT, 96}, {11, REDUCE, 27}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 21}, {1, SHIFT, 97}, },
			{{-1, ERROR, 63}, {11, SHIFT, 98}, },
			{{-1, ERROR, 64}, {35, SHIFT, 99}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 53}, {27, SHIFT, 100}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 69}, {8, SHIFT, 101}, },
			{{-1, REDUCE, 56}, {12, SHIFT, 102}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 103}, },
			{{-1, REDUCE, 60}, {14, SHIFT, 104}, {20, SHIFT, 105}, },
			{{-1, REDUCE, 63}, {15, SHIFT, 106}, {16, SHIFT, 107}, {17, SHIFT, 108}, {18, SHIFT, 109}, },
			{{-1, REDUCE, 68}, {19, SHIFT, 110}, {22, SHIFT, 111}, },
			{{-1, REDUCE, 71}, {21, SHIFT, 112}, {23, SHIFT, 113}, {24, SHIFT, 114}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 47}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {31, SHIFT, 53}, {39, SHIFT, 54}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 57}, {44, SHIFT, 58}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 80}, {1, SHIFT, 47}, {9, SHIFT, 49}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {44, SHIFT, 58}, },
			{{-1, REDUCE, 39}, {25, SHIFT, 13}, {32, SHIFT, 15}, {40, SHIFT, 17}, {43, SHIFT, 18}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 83}, {7, SHIFT, 119}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 87}, {9, SHIFT, 84}, {45, SHIFT, 120}, },
			{{-1, REDUCE, 83}, {1, SHIFT, 94}, {2, SHIFT, 95}, {4, SHIFT, 96}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 92}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 93}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 94}, {1, SHIFT, 47}, {9, SHIFT, 49}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 95}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 96}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 97}, {44, SHIFT, 128}, },
			{{-1, ERROR, 98}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 99}, {1, SHIFT, 47}, {4, SHIFT, 48}, {8, SHIFT, 130}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 100}, {3, SHIFT, 132}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 102}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 103}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 104}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 105}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 106}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 107}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 108}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 109}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 110}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 111}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 112}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 113}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, ERROR, 114}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 41}, {0, SHIFT, 146}, },
			{{-1, ERROR, 118}, {7, SHIFT, 147}, },
			{{-1, ERROR, 119}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 122}, {7, SHIFT, 149}, },
			{{-1, ERROR, 123}, {7, SHIFT, 150}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 125}, {5, SHIFT, 151}, },
			{{-1, REDUCE, 84}, {0, SHIFT, 152}, },
			{{-1, ERROR, 127}, {7, SHIFT, 153}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 129}, {8, SHIFT, 154}, },
			{{-1, ERROR, 130}, {6, SHIFT, 155}, },
			{{-1, ERROR, 131}, {8, SHIFT, 156}, },
			{{-1, REDUCE, 46}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {31, SHIFT, 53}, {39, SHIFT, 54}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 57}, {44, SHIFT, 58}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 39}, {25, SHIFT, 13}, {32, SHIFT, 15}, {40, SHIFT, 17}, {43, SHIFT, 18}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 149}, {3, SHIFT, 159}, },
			{{-1, ERROR, 150}, {3, SHIFT, 160}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 152}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 88}, {44, SHIFT, 58}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 156}, {6, SHIFT, 162}, },
			{{-1, ERROR, 157}, {6, SHIFT, 163}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 46}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {31, SHIFT, 53}, {39, SHIFT, 54}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 57}, {44, SHIFT, 58}, },
			{{-1, REDUCE, 46}, {1, SHIFT, 47}, {4, SHIFT, 48}, {9, SHIFT, 49}, {13, SHIFT, 50}, {19, SHIFT, 51}, {22, SHIFT, 52}, {31, SHIFT, 53}, {39, SHIFT, 54}, {41, SHIFT, 55}, {42, SHIFT, 56}, {43, SHIFT, 57}, {44, SHIFT, 58}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 164}, {6, SHIFT, 166}, },
			{{-1, ERROR, 165}, {6, SHIFT, 167}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 55}, },
        };*/
    public static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 6}, {7, 10}, },
			{{-1, 3}, },
			{{-1, 7}, },
			{{-1, 19}, {12, 29}, },
			{{-1, 20}, {28, 42}, },
			{{-1, 21}, },
			{{-1, 22}, {81, 117}, {146, 117}, },
			{{-1, 23}, },
			{{-1, 59}, {80, 116}, },
			{{-1, 60}, },
			{{-1, 86}, {87, 121}, },
			{{-1, 61}, },
			{{-1, 62}, },
			{{-1, 63}, {25, 40}, {30, 44}, },
			{{-1, 46}, },
			{{-1, 24}, },
			{{-1, 32}, },
			{{-1, 25}, {14, 30}, {16, 33}, {48, 83}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 118}, {146, 158}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 38}, },
			{{-1, 64}, {132, 157}, {159, 164}, {160, 165}, },
			{{-1, 65}, {78, 115}, },
			{{-1, 66}, },
			{{-1, 67}, },
			{{-1, 68}, },
			{{-1, 69}, {92, 122}, {93, 123}, {95, 125}, {96, 126}, {98, 129}, {99, 131}, {102, 133}, {152, 126}, },
			{{-1, 70}, {103, 134}, },
			{{-1, 71}, {104, 135}, {105, 136}, },
			{{-1, 72}, {106, 137}, {107, 138}, {108, 139}, {109, 140}, },
			{{-1, 73}, {110, 141}, {111, 142}, },
			{{-1, 74}, {112, 143}, {113, 144}, {114, 145}, },
			{{-1, 75}, {50, 89}, },
			{{-1, 76}, {119, 148}, },
			{{-1, 77}, {94, 124}, },
			{{-1, 127}, {152, 161}, },
			{{-1, 28}, },
			{{-1, 87}, },
			{{-1, 78}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'public'",
			"expecting: 'class'",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: identifier",
			"expecting: '{'",
			"expecting: '}', 'boolean', 'final', 'int', 'public', 'String', identifier",
			"expecting: '[', ')', identifier",
			"expecting: 'boolean', 'int', 'String', identifier",
			"expecting: 'boolean', 'int', 'void', 'String', identifier",
			"expecting: '}'",
			"expecting: ';'",
			"expecting: '.', '(', '"', '!', '-', '+', 'if', 'return', 'while', literal boolean, 'null', identifier, non negative integer",
			"expecting: ',', ')', ';', '='",
			"expecting: ',', ')', ';'",
			"expecting: ']'",
			"expecting: '='",
			"expecting: '('",
			"expecting: non negative integer",
			"expecting: '"', char",
			"expecting: '.', '(', '"', '!', '-', '+', literal boolean, 'null', identifier, non negative integer",
			"expecting: ',', ']', ')', ';', '&&', '||', '==', '>', '>=', '<', '<=', '-', '!=', '%', '+', '/', '*'",
			"expecting: '.', '[', '(', ';', '&&', '=', '||', '==', '>', '>=', '<', '<=', '-', '!=', '%', '+', '/', '*'",
			"expecting: ',', '.', ']', ')', ';', '&&', '||', '==', '>', '>=', '<', '<=', '-', '!=', '%', '+', '/', '*'",
			"expecting: 'return'",
			"expecting: '.', '(', '}', '"', '!', '-', '+', 'if', 'return', 'while', literal boolean, 'null', identifier, non negative integer",
			"expecting: '.', '(', '}', '"', '!', '-', '+', 'else', 'if', 'return', 'while', literal boolean, 'null', identifier, non negative integer",
			"expecting: ',', ']', ')', ';', '||'",
			"expecting: ',', ']', ')', ';', '&&', '||'",
			"expecting: ',', ']', ')', ';', '&&', '||', '==', '!='",
			"expecting: ',', ']', ')', ';', '&&', '||', '==', '>', '>=', '<', '<=', '!='",
			"expecting: ',', ']', ')', ';', '&&', '||', '==', '>', '>=', '<', '<=', '-', '!=', '+'",
			"expecting: ')', identifier",
			"expecting: '.', '"', '-', '+', literal boolean, 'null', non negative integer",
			"expecting: ')', 'boolean', 'int', 'String', identifier",
			"expecting: ')'",
			"expecting: ',', '.', '[', '(', ']', ')', ';', '&&', '||', '==', '>', '>=', '<', '<=', '-', '!=', '%', '+', '/', '*'",
			"expecting: '.', '"', '-', '+', literal boolean, 'null', identifier, non negative integer",
			"expecting: '.', '(', ';', '"', '!', '-', '+', literal boolean, 'null', identifier, non negative integer",
			"expecting: ',', ')'",
			"expecting: '.', '(', '"', '-', '+', literal boolean, 'null', identifier, non negative integer",
			"expecting: '.', '(', '}', '"', '!', '-', '+', 'if', 'while', literal boolean, 'null', identifier, non negative integer",
			"expecting: ',', ']', ')', ';'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 2, 3, 5, 5, 2, 6, 6, 7, 8, 7, 9, 7, 7, 10, 6, 6, 11, 11, 5, 4, 7, 7, 6, 10, 4, 4, 4, 4, 3, 6, 6, 12, 6, 13, 14, 15, 6, 3, 16, 17, 17, 18, 8, 19, 20, 18, 18, 17, 17, 21, 21, 22, 23, 21, 21, 21, 23, 16, 24, 25, 26, 25, 25, 11, 27, 28, 29, 30, 31, 21, 21, 21, 25, 32, 33, 34, 21, 35, 21, 19, 21, 19, 36, 21, 23, 23, 20, 20, 37, 20, 20, 18, 20, 38, 5, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 25, 11, 39, 35, 40, 19, 21, 35, 35, 21, 15, 39, 35, 21, 11, 10, 11, 41, 42, 27, 28, 28, 29, 29, 29, 29, 30, 30, 31, 31, 31, 34, 5, 21, 5, 5, 21, 20, 21, 25, 6, 10, 10, 35, 41, 41, 35, 6, 25, 10, 10, 26, 25, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
