/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.node;

import ua.kiev.kpi.sc.parser.analysis.*;

@SuppressWarnings("nls")
public final class AOrExprExpression extends PExpression
{
    private POperandOr _operandOr_;
    private TBarBar _barBar_;
    private PExpression _expression_;

    public AOrExprExpression()
    {
        // Constructor
    }

    public AOrExprExpression(
        @SuppressWarnings("hiding") POperandOr _operandOr_,
        @SuppressWarnings("hiding") TBarBar _barBar_,
        @SuppressWarnings("hiding") PExpression _expression_)
    {
        // Constructor
        setOperandOr(_operandOr_);

        setBarBar(_barBar_);

        setExpression(_expression_);

    }

    @Override
    public Object clone()
    {
        return new AOrExprExpression(
            cloneNode(this._operandOr_),
            cloneNode(this._barBar_),
            cloneNode(this._expression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrExprExpression(this);
    }

    public POperandOr getOperandOr()
    {
        return this._operandOr_;
    }

    public void setOperandOr(POperandOr node)
    {
        if(this._operandOr_ != null)
        {
            this._operandOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._operandOr_ = node;
    }

    public TBarBar getBarBar()
    {
        return this._barBar_;
    }

    public void setBarBar(TBarBar node)
    {
        if(this._barBar_ != null)
        {
            this._barBar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._barBar_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._operandOr_)
            + toString(this._barBar_)
            + toString(this._expression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._operandOr_ == child)
        {
            this._operandOr_ = null;
            return;
        }

        if(this._barBar_ == child)
        {
            this._barBar_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._operandOr_ == oldChild)
        {
            setOperandOr((POperandOr) newChild);
            return;
        }

        if(this._barBar_ == oldChild)
        {
            setBarBar((TBarBar) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
