/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.node;

import ua.kiev.kpi.sc.parser.analysis.*;

@SuppressWarnings("nls")
public final class ASingleClassSeq extends PClassSeq
{
    private PNotPublicClass _notPublicClass_;

    public ASingleClassSeq()
    {
        // Constructor
    }

    public ASingleClassSeq(
        @SuppressWarnings("hiding") PNotPublicClass _notPublicClass_)
    {
        // Constructor
        setNotPublicClass(_notPublicClass_);

    }

    @Override
    public Object clone()
    {
        return new ASingleClassSeq(
            cloneNode(this._notPublicClass_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASingleClassSeq(this);
    }

    public PNotPublicClass getNotPublicClass()
    {
        return this._notPublicClass_;
    }

    public void setNotPublicClass(PNotPublicClass node)
    {
        if(this._notPublicClass_ != null)
        {
            this._notPublicClass_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._notPublicClass_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._notPublicClass_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._notPublicClass_ == child)
        {
            this._notPublicClass_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._notPublicClass_ == oldChild)
        {
            setNotPublicClass((PNotPublicClass) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
