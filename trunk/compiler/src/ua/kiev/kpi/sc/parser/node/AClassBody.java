/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.node;

import java.util.*;
import ua.kiev.kpi.sc.parser.analysis.*;

@SuppressWarnings("nls")
public final class AClassBody extends PClassBody
{
    private final LinkedList<PClassBodyElem> _classBodyElem_ = new LinkedList<PClassBodyElem>();

    public AClassBody()
    {
        // Constructor
    }

    public AClassBody(
        @SuppressWarnings("hiding") List<PClassBodyElem> _classBodyElem_)
    {
        // Constructor
        setClassBodyElem(_classBodyElem_);

    }

    @Override
    public Object clone()
    {
        return new AClassBody(
            cloneList(this._classBodyElem_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassBody(this);
    }

    public LinkedList<PClassBodyElem> getClassBodyElem()
    {
        return this._classBodyElem_;
    }

    public void setClassBodyElem(List<PClassBodyElem> list)
    {
        this._classBodyElem_.clear();
        this._classBodyElem_.addAll(list);
        for(PClassBodyElem e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classBodyElem_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classBodyElem_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PClassBodyElem> i = this._classBodyElem_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PClassBodyElem) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
