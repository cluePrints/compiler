/* This file was generated by SableCC (http://www.sablecc.org/). */

package ua.kiev.kpi.sc.parser.analysis;

import java.util.*;
import ua.kiev.kpi.sc.parser.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseASingleCompilationUnit(ASingleCompilationUnit node)
    {
        defaultCase(node);
    }

    public void caseAMultiCompilationUnit(AMultiCompilationUnit node)
    {
        defaultCase(node);
    }

    public void caseASingleClassSeq(ASingleClassSeq node)
    {
        defaultCase(node);
    }

    public void caseAMultiClassSeq(AMultiClassSeq node)
    {
        defaultCase(node);
    }

    public void caseAPublicClass(APublicClass node)
    {
        defaultCase(node);
    }

    public void caseANotPublicClass(ANotPublicClass node)
    {
        defaultCase(node);
    }

    public void caseAClassBody(AClassBody node)
    {
        defaultCase(node);
    }

    public void caseAFunctionClassBodyElem(AFunctionClassBodyElem node)
    {
        defaultCase(node);
    }

    public void caseAVariableClassBodyElem(AVariableClassBodyElem node)
    {
        defaultCase(node);
    }

    public void caseAConstantClassBodyElem(AConstantClassBodyElem node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDefinition(AFunctionDefinition node)
    {
        defaultCase(node);
    }

    public void caseAVariableDefinition(AVariableDefinition node)
    {
        defaultCase(node);
    }

    public void caseAConstantDefinition(AConstantDefinition node)
    {
        defaultCase(node);
    }

    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseANumericLiteral(ANumericLiteral node)
    {
        defaultCase(node);
    }

    public void caseANullLiteral(ANullLiteral node)
    {
        defaultCase(node);
    }

    public void caseALiteralString(ALiteralString node)
    {
        defaultCase(node);
    }

    public void caseADoubleQuoteClosing(ADoubleQuoteClosing node)
    {
        defaultCase(node);
    }

    public void caseAIntLiteralNumeric(AIntLiteralNumeric node)
    {
        defaultCase(node);
    }

    public void caseAFracLiteralNumeric(AFracLiteralNumeric node)
    {
        defaultCase(node);
    }

    public void caseARealLiteralNumeric(ARealLiteralNumeric node)
    {
        defaultCase(node);
    }

    public void caseASimpleInteger(ASimpleInteger node)
    {
        defaultCase(node);
    }

    public void caseAPositiveSignedInteger(APositiveSignedInteger node)
    {
        defaultCase(node);
    }

    public void caseANegativeInteger(ANegativeInteger node)
    {
        defaultCase(node);
    }

    public void caseAVariableName(AVariableName node)
    {
        defaultCase(node);
    }

    public void caseAFunctionName(AFunctionName node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAVoidResultType(AVoidResultType node)
    {
        defaultCase(node);
    }

    public void caseAVariableResultType(AVariableResultType node)
    {
        defaultCase(node);
    }

    public void caseAScalarVariableType(AScalarVariableType node)
    {
        defaultCase(node);
    }

    public void caseAArrayVariableType(AArrayVariableType node)
    {
        defaultCase(node);
    }

    public void caseABooleanType(ABooleanType node)
    {
        defaultCase(node);
    }

    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    public void caseAStringType(AStringType node)
    {
        defaultCase(node);
    }

    public void caseATypeType(ATypeType node)
    {
        defaultCase(node);
    }

    public void caseATypeName(ATypeName node)
    {
        defaultCase(node);
    }

    public void caseANothingFormalArgList(ANothingFormalArgList node)
    {
        defaultCase(node);
    }

    public void caseASingleVarFormalArgList(ASingleVarFormalArgList node)
    {
        defaultCase(node);
    }

    public void caseAMultipleNVarFormalArgList(AMultipleNVarFormalArgList node)
    {
        defaultCase(node);
    }

    public void caseAMethodName(AMethodName node)
    {
        defaultCase(node);
    }

    public void caseAConstantName(AConstantName node)
    {
        defaultCase(node);
    }

    public void caseANormalFunctionBody(ANormalFunctionBody node)
    {
        defaultCase(node);
    }

    public void caseAVoidFunctionBody(AVoidFunctionBody node)
    {
        defaultCase(node);
    }

    public void caseASingleBlock(ASingleBlock node)
    {
        defaultCase(node);
    }

    public void caseASimpleOperator(ASimpleOperator node)
    {
        defaultCase(node);
    }

    public void caseAAssignOperator(AAssignOperator node)
    {
        defaultCase(node);
    }

    public void caseACondOperator(ACondOperator node)
    {
        defaultCase(node);
    }

    public void caseACycleOperator(ACycleOperator node)
    {
        defaultCase(node);
    }

    public void caseASimpleIf(ASimpleIf node)
    {
        defaultCase(node);
    }

    public void caseASimpleConditionalOperator(ASimpleConditionalOperator node)
    {
        defaultCase(node);
    }

    public void caseAElseConditionalOperator(AElseConditionalOperator node)
    {
        defaultCase(node);
    }

    public void caseACycleCycleOperator(ACycleCycleOperator node)
    {
        defaultCase(node);
    }

    public void caseASimpleExpression(ASimpleExpression node)
    {
        defaultCase(node);
    }

    public void caseAOrExprExpression(AOrExprExpression node)
    {
        defaultCase(node);
    }

    public void caseASimpleOperandOr(ASimpleOperandOr node)
    {
        defaultCase(node);
    }

    public void caseAAndOperandOr(AAndOperandOr node)
    {
        defaultCase(node);
    }

    public void caseASimpleOperandAnd(ASimpleOperandAnd node)
    {
        defaultCase(node);
    }

    public void caseAEqOperandAnd(AEqOperandAnd node)
    {
        defaultCase(node);
    }

    public void caseANeqOperandAnd(ANeqOperandAnd node)
    {
        defaultCase(node);
    }

    public void caseASimpleComparisonExpression(ASimpleComparisonExpression node)
    {
        defaultCase(node);
    }

    public void caseAGtComparisonExpression(AGtComparisonExpression node)
    {
        defaultCase(node);
    }

    public void caseALtComparisonExpression(ALtComparisonExpression node)
    {
        defaultCase(node);
    }

    public void caseALteqComparisonExpression(ALteqComparisonExpression node)
    {
        defaultCase(node);
    }

    public void caseAGteqComparisonExpression(AGteqComparisonExpression node)
    {
        defaultCase(node);
    }

    public void caseASimpleSimpleExpression(ASimpleSimpleExpression node)
    {
        defaultCase(node);
    }

    public void caseAAddSimpleExpression(AAddSimpleExpression node)
    {
        defaultCase(node);
    }

    public void caseASubSimpleExpression(ASubSimpleExpression node)
    {
        defaultCase(node);
    }

    public void caseASimpleSummand(ASimpleSummand node)
    {
        defaultCase(node);
    }

    public void caseAMulSummand(AMulSummand node)
    {
        defaultCase(node);
    }

    public void caseADivSummand(ADivSummand node)
    {
        defaultCase(node);
    }

    public void caseARemSummand(ARemSummand node)
    {
        defaultCase(node);
    }

    public void caseASimpleMultiplier(ASimpleMultiplier node)
    {
        defaultCase(node);
    }

    public void caseANegMultiplier(ANegMultiplier node)
    {
        defaultCase(node);
    }

    public void caseASimpleCast(ASimpleCast node)
    {
        defaultCase(node);
    }

    public void caseANegCast(ANegCast node)
    {
        defaultCase(node);
    }

    public void caseARecursiveElementalExpression(ARecursiveElementalExpression node)
    {
        defaultCase(node);
    }

    public void caseAArrElemElementalExpression(AArrElemElementalExpression node)
    {
        defaultCase(node);
    }

    public void caseACallElementalExpression(ACallElementalExpression node)
    {
        defaultCase(node);
    }

    public void caseALiteralElementalExpression(ALiteralElementalExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierElementalExpression(AIdentifierElementalExpression node)
    {
        defaultCase(node);
    }

    public void caseASingleFactArgList(ASingleFactArgList node)
    {
        defaultCase(node);
    }

    public void caseAMultipleFactArgList(AMultipleFactArgList node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTLBkt(TLBkt node)
    {
        defaultCase(node);
    }

    public void caseTLBrc(TLBrc node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRBkt(TRBkt node)
    {
        defaultCase(node);
    }

    public void caseTRBrc(TRBrc node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTDoubleQuote(TDoubleQuote node)
    {
        defaultCase(node);
    }

    public void caseTAmpAmp(TAmpAmp node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTBarBar(TBarBar node)
    {
        defaultCase(node);
    }

    public void caseTEmark(TEmark node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    public void caseTPercent(TPercent node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    public void caseTClassToken(TClassToken node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTFinal(TFinal node)
    {
        defaultCase(node);
    }

    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTShort(TShort node)
    {
        defaultCase(node);
    }

    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTStringToken(TStringToken node)
    {
        defaultCase(node);
    }

    public void caseTLiteralBoolean(TLiteralBoolean node)
    {
        defaultCase(node);
    }

    public void caseTLiteralNull(TLiteralNull node)
    {
        defaultCase(node);
    }

    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTNonNegativeInteger(TNonNegativeInteger node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
